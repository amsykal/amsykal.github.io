<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Blog</title>
	<link href="http://amsykal.github.io/blog/atom.xml" rel="self"/>
	<link href="http://amsykal.github.io/blog"/>
	<updated>2021-03-11T04:55:22+05:30</updated>
	<id>http://amsykal.github.io/blog</id>
	<author>
		<name>Lakshmi</name>
		<email>a.lakshmi.s@gmail.com</email>
	</author>

	
		<entry>
			<title>Art with Code: Noise Based Loops and Some Reflections</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/03/08/post033.html"/>
			<updated>2021-03-08T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/03/08/post033</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;The Universe, she’s dancing now&lt;br /&gt;
They got her lit up, lit up on the moon&lt;br /&gt;
They got stars doing cartwheels, all the nebulas on the tune&lt;br /&gt;
…&lt;br /&gt;
The Universe, she’s wounded&lt;br /&gt;
But she’s still got infinity ahead of her&lt;br /&gt;
She’s still got you and me&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gregory Alan Isakov&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/033c.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/033b.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/033a.gif&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let simplexNoise;
let numFrames = 200;
// set frame rate
let fps = 30;
// the canvas capturer instance
let capturer = new CCapture({ format: 'png', framerate: fps });

let points = [];
let n = 5000;
let radius = 200;
let colors;

function setup(){
  createCanvas(500,500,WEBGL);
  background(10);

  // for 4d noise
  simplexNoise = new OpenSimplexNoise(Date.now());

  for(let i = 0; i&amp;lt;n; i++){
    angle = 2*PI*random(1);
    points[i] = new PointObj4(radius,angle);
  }

  frameRate(fps);
  // start the recording
  capturer.start();
}


function draw(){
  background(0);
  if (frameCount &amp;gt;= numFrames){
    noLoop();
    capturer.stop();
    capturer.save();
    return;
  }
  render();
  capturer.capture(document.getElementById('defaultCanvas0'));
}


// simplexNoise based loops
function render(){
  // for every point in the array display it on canvas
  let t = 1.0*frameCount/numFrames;
  for(let i = 0; i &amp;lt; n; i++){
    // setting color, transperancy etc
    let colors = [color(19, 41, 61),color(0, 100, 148),color(36, 123, 160),
                  color(27, 152, 224)];
    let cl = random(colors);
    cl.setAlpha(5);
    stroke(cl);
    noFill();
    strokeWeight(1);
    points[i].show(t);
  }

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// points in a rectangle of given width and height
class PointObj4{

  constructor(rad,ang){
    // get a random point within circle of radius
    this.x = rad*cos(ang);
    this.y = rad*sin(ang);;
  }

  show(t){
    // parameters that contol appearance of passage of point
    // play around with these values
    let r = 2;
    let d = random([25,50,75,100]);
    let k = 200;

    let x = this.x;
    let y = this.y;

    // the color ,alpha etc has been set in the calling function
    ellipse(x,y,1,1);

    // move the point along a trajectory based on 4D simplex noise
    for(let i = 0; i &amp;lt; k; i++){
      let xx = d*simplexNoise.noise4D(0.01*x,0.01*y,r*cos(2*PI*t),r*sin(2*PI*t));
      let yy = d*simplexNoise.noise4D(100+0.01*x,0.01*y,r*cos(2*PI*t),r*sin(2*PI*t));
      // create a vector built from simplex noise
      let v = new createVector(xx,yy);
      // scale it
      v.mult(0.15);
      // update position of point
      x += v.x;
      y += v.y;
      ellipse(x,y,1,1);
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Some old sketches.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;reflections&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I step out of the house. It’s around 5 in the morning.Most of the city is still sleeping and the world is silent. I look up at the stars. I spot the familiar ones. I draw imaginary lines between them. I make a star out of stars.I think about how I could do this recursively forever.I think about the majesty of universe.I think about how my great great grandmother and her great great grandmother could have been watching the same stars and wondering the same things as I am doing today.I think about how time is infinite. To be alive, to think what I am thinking, to be a witness to the wonder that is the universe,to feel one with time and space.There is something so deeply moving about this experience and I find myself in tears.All at once, my brain is completely flooded with words I have read over the years, music I have listened to over the years, works of art I have seen over the years.&lt;/p&gt;

&lt;p&gt;Words from&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.planetary.org/worlds/pale-blue-dot&quot;&gt;Carl Sagan’s famous Pale Blue Dot&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Our posturings, our imagined self-importance, the delusion that we have some privileged position in the Universe, are challenged by this point of pale light. Our planet is a lonely speck in the great enveloping cosmic dark. In our obscurity, in all this vastness, there is no hint that help will come from elsewhere to save us from ourselves.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alan Lightman’s book &lt;a href=&quot;https://www.goodreads.com/book/show/35749415-searching-for-stars-on-an-island-in-maine&quot;&gt;Searching For Stars on an Island in Maine&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;On this island, I am light years away from the noise and heave of the world. Like Thoreau, I came here “because I wished to live deliberately, to front only the essential facts of life, and see if I could not learn what life had to teach, and not, when I came to die, discover that I had not lived.” I choose to live.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rebecca Elson’s poem &lt;a href=&quot;https://www.theguardian.com/books/booksblog/2020/mar/23/poem-of-the-week-antidotes-to-fear-of-death-by-rebecca-elson&quot;&gt;Antitode to fear of death&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;No outer space, just space,&lt;br /&gt;
 The light of all the not yet stars&lt;br /&gt;
 Drifting like a bright mist,&lt;br /&gt;
 And all of us, and everything&lt;br /&gt;
 Already there&lt;br /&gt;
 But unconstrained by form.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/262836574&quot;&gt;Anna Leahy’s  poem The habit of light&lt;/a&gt; inspired by the work of Henrietta Leavitt&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The universe is made of distance and of dust.&lt;br /&gt;
 More dust than star out there&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.feynman.com/stories/poem-for-rpf/&quot;&gt;Feynman’s lament&lt;/a&gt; about poets who refuse to mix science and poetry,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;What men are poets who can speak of Jupiter if he were a man, but if he is an immense spinning sphere of methane and ammonia must be silent?&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vangoghgallery.com/painting/starry-night.html&quot;&gt;Van Gogh’s Starry Night&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/033d.jpg&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wassilykandinsky.net/work-49.php&quot;&gt;Kandinsky’s Several Circles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/033e.jpg&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;River in &lt;a href=&quot;https://store.steampowered.com/app/206440/To_the_Moon/&quot;&gt;‘To The Moon’&lt;/a&gt; (the incredibly beautiful,cathartic RPG game)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;I’ve never told anyone, but… I’ve always thought they were lighthouses. Billions of lighthouses… … stuck at the far end of the sky…They can see all the other lighthouses out there, and they want to talk to them.  But they can’t, because they’re all too far apart to hear what the others are saying.  All they can do… is shine their lights from afar.  … So that’s what they do.  They shine their lights at the other lighthouses, and at me….Because one day… … I’m going to befriend one of them.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the background I am listening in my mind to &lt;a href=&quot;https://www.youtube.com/watch?v=dIwwjy4slI8&quot;&gt;Nils Frahm’s Says&lt;/a&gt; and  &lt;a href=&quot;https://www.youtube.com/watch?v=H9gFLkNdHvA&quot;&gt;Arrival of the Birds by The Cinematic Orchestra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So many words, so many snapshots, so many notes ..all floating by.&lt;/p&gt;

&lt;p&gt;Those feelings I felt the previous day, the one before that, all the yesterdays, of hurt , bitterness ,envy, resentment, perceived injustices,the physical and mental fatigue that comes with daily drudgery of life has all but melted away.The sense of despair lifts and I feel free in a way I haven’t felt in years.&lt;/p&gt;

&lt;p&gt;None of this matters.Nothing matters.I am grateful.I am grateful that I even get to be a part of all of this.To be human,to think these thoughts, to be awed and moved by nature,by the universe,by the brilliance of men and women who write so eloquently,who compose music that transcends space and time, who create works of art that is timeless, who build skyscrapers, railroads, reactors, rovers travelling millions of miles landing on another planet ,sending back pictures and videos ….. How can you not be moved.&lt;/p&gt;

&lt;p&gt;For now, this is all I can afford.The duties of the day ahead beckon me.As I soak the experience in,I have one of those rare epiphanies.We all have our struggles.We are all alone,together.To be empathetic without having my cup full is challenging.I am human.I have my desires.I have my flaws.I have my failures.I am not a monk.But I can reflect and forgive myself, make room for mistakes, give myself some air to breathe.&lt;/p&gt;

&lt;p&gt;Later in the night ,I write all of this down , reflect some more in the quiet of the night.Life lessons, if you will.Some clichéd, yes ,but reinforcements help.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be more forgiving of others.&lt;/li&gt;
  &lt;li&gt;Do not let words and actions of others bother you,they don’t matter and they only hurt if you want to be hurt.&lt;/li&gt;
  &lt;li&gt;Make ENOUGH time and space for yourself because no one else is going to do it for you. And if you don’t ,you will wither away and be taken for granted.You have to keep some distance and draw some boundaries if you do not want to lose your sanity.&lt;/li&gt;
  &lt;li&gt;Once you have filled your cup,only then lend your hand and ears but keep the spoken words limited.&lt;/li&gt;
  &lt;li&gt;There is clarity in the written word - pen on paper is therapeutic.One tends to be carried away by the moment with spoken words.&lt;/li&gt;
  &lt;li&gt;Some people are impossible to please and you will always fall short - that’s not your problem.&lt;/li&gt;
  &lt;li&gt;You will be old one day too.Be the kind of person your older self would want to interact with.&lt;/li&gt;
  &lt;li&gt;Empathy, not pity&lt;/li&gt;
  &lt;li&gt;Get back your sense of humour in life
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;Humor, more than anything else in the human make-up, can afford an aloofness and an ability to rise above any situation, even if only for a few seconds … Viktor Frankl&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Be &lt;a href=&quot;https://www.gutenberg.org/files/16643/16643-h/16643-h.htm#SELF-RELIANCE&quot;&gt;self reliant&lt;/a&gt; but remember that seeking help when you lack clarity or knowledge is not a failure on your part.&lt;/li&gt;
  &lt;li&gt;When conflicted, seek multiple perspectives by reading up and listening to those whom you look up to or respect, but eventually own up to the decisions you make, good or bad.&lt;/li&gt;
  &lt;li&gt;It is the trials and tribulations that bring clarity in life.As much they drain your mental and physical energy,making even the smallest of tasks seem like an ordeal, it is these adversities that will teach you the essence of life and what you truly hold dear.&lt;/li&gt;
  &lt;li&gt;Neither do you have to live upto the expectations of others, nor should you expect others to live upto yours.&lt;/li&gt;
  &lt;li&gt;A part of ‘adulting’ is to come to terms with not being understood.&lt;/li&gt;
  &lt;li&gt;Yes,most people are kind and good willed but they aren’t going to get you and that’s okay.&lt;/li&gt;
  &lt;li&gt;Go All In.
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;If you’re going to live life, you’ve got to be all in.
Marian Diamond&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;And if everything fails, you have at least tried and there is always music,coding,art,books,teaching and long walks !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There isn’t much one needs in order to be at peace with oneself.
I am enough.I am okay.With all due apologies to Beckett, I can go on, I will go on.&lt;/p&gt;

&lt;p&gt;If I feel differently and contradict myself in future, I call upon Walt Whitman in my defence&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Do I contradict myself?&lt;br /&gt;
Very well then I contradict myself,&lt;br /&gt;
(I am large, I contain multitudes.)&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>What Do You Care What Other People Think</title>
			<link href="http://amsykal.github.io/life%20lessons/2021/02/28/post032.html"/>
			<updated>2021-02-28T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/life%20lessons/2021/02/28/post032</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;“You have no responsibility to live up to what other people think you ought to accomplish. I have no responsibility to be like they expect me to be. It’s their mistake, not my failing.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Richard P. Feynman, Surely You’re Joking, Mr. Feynman!: Adventures of a Curious Character&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[One] way to overcome our obsession with winning the admiration of other people is to go out of our way to do things likely to trigger their disdain. . . .Cato made a point of ignoring the dictates of fashion. . .According to Plutarch, Cato did this not because he “sought vainglory”; to the contrary , he dressed differently in order to accustom himself “to be ashamed only of what was really shameful, and to ignore men’s low opinion of other things.” In other words, Cato consciously did things to trigger the disdain of other people simply so he could practice ignoring their disdain.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;William Irvine, A Guide to the Good Life: The Ancient Art of Stoic Joy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Watching Now&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Qw4l1w0rkjs&amp;amp;list=PL30C13C91CFFEFEA6&amp;amp;index=3&quot;&gt;Justice: What’s The Right Thing To Do? Episode 03: “FREE TO CHOOSE”&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
		</entry>
	
		<entry>
			<title>Art with Code: Flow Fields</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/25/post031.html"/>
			<updated>2021-02-25T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/25/post031</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;‘The only way to make sense out of change is to plunge into it, move with it, and join the dance.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alan Wilson Watts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/031a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031h.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031i.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031j.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031k.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031l.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/031m.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function setup() {
  createCanvas(600, 600);
  background(0);
  colors = [color(46, 134, 171),color( 162, 59, 114),
            color(255,255,255),color(199, 62, 29),color(59, 31, 43)];
}

function draw(){
  noLoop();
  render();
  strokeWeight(80);
  stroke(0);
  noFill();
  rect(0,0,width,height);
}

function render(){
  let s = 10;
  let k = 15000;
  // color set up
  cl = random(colors);
  fl = random(colors);
  for(let i = 0; i &amp;lt; k; i += 1) {
    // color set up
    cl.setAlpha(160);
    fl.setAlpha(100);
    strokeWeight(2);
    stroke(fl);
    fill(fl);

    // get random x and y
    x = Math.random()*width;
    y = Math.random()*height;
    // some sort of vector field
    let value = ( (Math.sin(x * 0.02))**2 + (Math.sin(y * 0.02))**2) * Math.PI * 1;;
    push();
    translate(x, y);
    rotate(value);
    // try diff combos of line, ellipse etc
    //ellipse(0,0,s,s/4);
    line(0,0,2*s,0);
    stroke(cl);
    line(0,0,-s,0);
    pop();

  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;// points in a rectangle of given width and height
class PointObj4{&lt;/p&gt;

&lt;p&gt;constructor(rad,ang){
    // get a random point within circle of radius
    this.x = rad&lt;em&gt;cos(ang);
    this.y = rad&lt;/em&gt;sin(ang);;
  }&lt;/p&gt;

&lt;p&gt;show(t){
    // parameters that contol appearance of passage of point
    // play around with these values
    let r = 2;
    let d = random([25,50,75,100]);
    let k = 200;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let x = this.x;
let y = this.y;

// the color ,alpha etc has been set in the calling function
ellipse(x,y,1,1);

// move the point along a trajectory based on 4D simplex noise
for(let i = 0; i &amp;lt; k; i++){
  let xx = d*simplexNoise.noise4D(0.01*x,0.01*y,r*cos(2*PI*t),r*sin(2*PI*t));
  let yy = d*simplexNoise.noise4D(100+0.01*x,0.01*y,r*cos(2*PI*t),r*sin(2*PI*t));
  // create a vector built from simplex noise
  let v = new createVector(xx,yy);
  // scale it
  v.mult(0.15);
  // update position of point
  x += v.x;
  y += v.y;
  ellipse(x,y,1,1);
}   } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Some old stuff.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bit-101.com/blog/2017/10/flow-fields-part-i/&quot;&gt;Bit 101&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noise Loops: Points in Rose Curves</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/12/post030.html"/>
			<updated>2021-02-12T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/12/post030</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;William Wordsworth:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Continuous as the stars that shine&lt;br /&gt;
And twinkle on the milky way,&lt;br /&gt;
They stretched in never-ending line&lt;br /&gt;
Along the margin of a bay:&lt;br /&gt;
Ten thousand saw I at a glance,&lt;br /&gt;
Tossing their heads in sprightly dance..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/030a.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/030b.gif&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let simplexNoise;
let numFrames = 300;
// set frame rate
let fps = 30;
// the canvas capturer instance
let capturer = new CCapture({ format: 'png', framerate: fps });
let points = [];
let n = 10000;
let radius = 200;
let colors;

function setup(){
  createCanvas(500,500,WEBGL);
  background(10);

  // for 4d noise
  simplexNoise = new OpenSimplexNoise(Date.now());

  // get points on curve to plot
  for(let i = 0; i&amp;lt;n; i++){
    points[i] = new PointObj(radius);
  }

  frameRate(fps);
  // start the recording
  capturer.start();
}


function draw(){

  background(10);
  colors = [color(86, 163, 166),color(72, 69, 56),color(02, 212, 157),
            color(212, 234, 200),color(192, 216, 224)];
  if (frameCount &amp;gt;= numFrames){
    noLoop();
    capturer.stop();
    capturer.save();
    return;
  }
  // call render for each frame and capture the frame
  render();

  capturer.capture(document.getElementById('defaultCanvas0'));
}


// simplexNoise based loops
function render(){
  let t = 1.0*frameCount/numFrames;
  for(let i = 0; i &amp;lt; n; i++){
    // show will move the point
    points[i].show(t);
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// points inside a circle of radius
class PointObj{
  constructor(radius){
    let rad = (random(1))*radius;
    let ang = random(2*PI);
    this.radius = radius;

    // // astroid, set r to 400
    //this.x = rad*cos(ang)*sin(ang)*sin(ang);
    //this.y = rad*sin(ang)*cos(ang)*cos(ang);

    // rose
    // change k to get different number of petals
    let k = 8;
    this.x = rad*cos(k*ang)*cos(ang);
    this.y = rad*cos(k*ang)*sin(ang);

    //
  }

  show(t){
    // control location of point as a function of distance from center
    let intensity = pow(map(dist(this.x,this.y,0,0),0,this.radius,1,0),0.75);

    // change r and d for variations
    // changing r makes it jumpy
    // increasing d will change radius more
    let r = 1.5;
    let d = 75;
    let x = this.x;
    let y = this.y;
    let xx = x + d*intensity*simplexNoise.noise4D(0.01*x,0.01*y,r*cos(2*PI*t),r*sin(2*PI*t));
    let yy = y + d*intensity*simplexNoise.noise4D(100+0.01*x,0.01*y,r*cos(2*PI*t),r*sin(2*PI*t));

    let cl = color(250);
    cl.setAlpha(40);
    stroke(cl);
    noFill();
    strokeWeight(1);
    ellipse(xx,yy,1,1);
  }
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;Some old sketches that rely heavily on tutorials by &lt;a href=&quot;https://necessarydisorder.wordpress.com/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We take 10000 random points from a rose curve and let these follow a path based on simplex noise ensuring that they loop over.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rose_(mathematics)&quot;&gt;Rose Curves&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Lines In A Circle</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/12/post029.html"/>
			<updated>2021-02-12T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/12/post029</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;J.R.R. Tolkien, The Fellowship of the Ring:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;All that is gold does not glitter,&lt;br /&gt;
Not all those who wander are lost;&lt;br /&gt;
The old that is strong does not wither,&lt;br /&gt;
Deep roots are not reached by the frost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;From the ashes a fire shall be woken,&lt;br /&gt;
A light from the shadows shall spring;&lt;br /&gt;
Renewed shall be blade that was broken,&lt;br /&gt;
The crownless again shall be king.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/029a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/029b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/029c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/029d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/029e.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let simplexNoise,seed;
let colors = [];


function setup(){
  createCanvas(600,600);
  background(255, 235, 196);
  background(20, 20, 20);
  simplexNoise = new OpenSimplexNoise(Date.now());
  seed = 1000;
  colors = [color(238, 198, 67),
            color(238, 240, 242)];
}

function draw(){
  noLoop();
  push();
  translate(width/2,height/2);
  polygon(0,0,250,PI/2,PI+PI/2);
  pop();
}

// angle PI/1000, NOISE 0.1, what we vary - height - from 1 to 40
// simple function to draw polygon of any number of sides
function polygon(x, y, radius, start, end) {
  push();
  translate(x,y);
  // get vertices of circle - we get vertices from -PI/2 to +PI/2
  // if the vertex is x,y we draw a noisy line from x,y to -x,y
  beginShape();
  for (let a = start; a &amp;lt; end; a+= PI/1000) {
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    let r = 1;
    let t = millis()/1000;
    // change height for variations
    let height = 1;
    // change color,alpha for variations
    let cl = random(colors);
    //let cl = colors[1];
    cl.setAlpha(150);
    stroke(cl);
    strokeWeight(1);
    noFill();
    // drawing the noisy lines
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise4D(seed+0.1*x,seed+0.1*sy,r*cos(2*PI*t),r*sin(2*PI*t));
      let y = sy + height*sn;
      vertex(x,y);
      // second vertex with a different seed
      sn = simplexNoise.noise4D(2*seed+0.1*x,2*seed+0.1*sy,r*cos(2*PI*t),r*sin(2*PI*t));
      y = sy + height*sn;
      vertex(x,y);
    }
    endShape();
  }
  endShape();
  pop();
}




&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series uses same ideas as in many of the previous sketches.&lt;/p&gt;

&lt;p&gt;Simplex noise based lines are drawn horizontally with end points located on a circle.Using different levels of noise gives interesting patterns.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Designs</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/10/post028.html"/>
			<updated>2021-02-10T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/10/post028</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Albert Einstein:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Life is a great tapestry. The individual is only an insignificant thread in an immense and miraculous pattern.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/028a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028h.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028i.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/028j.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let s;
let colors = [];
let simplexNoise;
let seed,k;

function setup(){
  createCanvas(600,600);
  background(150);
  simplexNoise = new OpenSimplexNoise(Date.now());
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
  seed = 10;
}

function draw(){
  noLoop();
  strokeWeight(1);
  noFill();
  // initialize noise level
  k = 0.05;
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
  makegrid();
}

function makegrid(){
  // change cell size as needed
  s = 600;
  let rows = height/s;
  let cols = width/s;
  for(let i = 0; i &amp;lt;= rows; i++){
    for(let j = 0; j &amp;lt;= cols; j++){
      let x = j*s - 0.5*s;
      let y = i*s - 0.5*s;
      push();
      translate(x,y);
      render();
      pop();
    }
  }
}

function render(){
  // horizontal
  let inc = PI/10;
  push();
  for(let r = 100 ; r &amp;lt; 0.45*s; r+= 4){
    for(let a = 0; a &amp;lt; PI; a+=inc){
        let x1 = r*cos(a+PI/200);
        let y1 = r*sin(a+PI/200);
        let x2 = r*cos(a+inc-PI/200);
        let y2 = r*sin(a+inc-PI/200);
        // bottom half
        nline(x1,y1,x2,y2,k);
        // top half
        nline(x1,-y1,x2,-y2,k);
    }
  }
  pop();

  // vertical - some variations uncomment this bit
  for(let a = -PI/2; a &amp;lt; PI/2; a+=PI/75){
        stroke(0,100);
        let x1 = 150*cos(a);
        let y1 = 150*sin(a);
        let x2 = 0.45*s*cos(a);
        let y2 = 0.45*s*sin(a);
        nline(x2,y2,x1,y1,0.1);
        nline(-x1,-y1,-x2,-y2,0.1);
  }
}


// draw noisy line between 2 coordinates
// x1,y1 and x2,y2
// k specifies how noisy
function nline(x1,y1,x2,y2,k){

  // change seed for every render
  //seed += 1000;
  // compute distance between 2 lines
  let d = dist(x1,y1,x2,y2);
  // how much do you want to scale the noise ?
  let sc = 10;
  // angle by which to rotate line
  let ang = atan((y2-y1)/(x2-x1));
  // readjust coordinates etc to get proper alignment of line
  push();
  translate(x2,y2);
  rotate(ang);
  beginShape();

  for(let i = 0; i &amp;lt; d; i += 1){
    let t = millis()/1000;
    let sn = simplexNoise.noise4D(seed+k*i,0,cos(2*PI*t),sin(2*PI*t));
    let y = sc*sn;
    // set color for colored version

    let cl = random(colors);
    cl.setAlpha(120);
    stroke(0);
    fill(cl);

    vertex(i,y);

    let ch = random(1);
    // for some of the variations add small circles
    if (ch &amp;gt; 0.99){
      //stroke(0);
      //fill(cl);
      //ellipse(i,y,5,5);
    }
  }
  endShape();
  pop();
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series is a hodgepodge of sketches based on noise and polygons.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Moiré Pattern</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/10/post027.html"/>
			<updated>2021-02-10T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/10/post027</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Betsy Cornwell, Mechanica:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Everything was a broken line for me in those days. I was slipped into the empty spaces between words.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/027a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027h.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027i.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027j.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027k.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/027l.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let cl,simplexNoise;
let s,seed;
let k;

function setup(){
  createCanvas(600,600);
  background(26, 42, 49);
  simplexNoise = new OpenSimplexNoise(Date.now());
  seed = 1000;
}

function draw(){
  noLoop();
  makeGrid();
}

function makeGrid(){
  // size of cell - change for variations
  s = 60;
  // how noisy ? change for variations
  k = 0.001;
  let rows = height/s;
  let cols = width/s;
  for(let i = 0; i &amp;lt; cols; i++){
    for(let j = 0; j &amp;lt; rows; j++){
      let x = i*s+s/2;
      let y = j*s+s/2;

      push();
      translate(x,y);
      // rotate each circle in the cell based on noise
      // so things are not too random and you get a nice pattern
      let ang = 2*PI*noise(0.05*x,0.05*y);
      rotate(ang);

      // set up colors etc for first draw
      let cl = random(colors);
      stroke(255, 255, 234);
      strokeWeight(2);
      // render with white strokes
      render();

      // get crossed lines with background colors
      // this gives us lines with breaks
      rotate(ang + PI/4);
      stroke(26, 42, 49,250);
      render();

      pop();
    }
  }
}

function render(){
  noFill();
  push();
  translate(-s/2,-s/2);
  polygon(s/2,s/2, 0.4*s, 0.5*PI,1.5*PI) ;
  pop();
}

// simple function to draw polygon of any number of sides
function polygon(x, y, radius, start, end) {
  push();
  translate(x,y);
  beginShape();
  for (let a = start; a &amp;lt; end; a+= PI/20) {
    // vertices of circle
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    let r = 1;
    let t = millis()/1000;
    let height = 10;
    // drawing the lines
    // k and height controls appearance of the lines
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise4D(seed+k*x,seed+k*sy,r*cos(2*PI*t),r*sin(2*PI*t));
      let y = sy + height*sn;
      vertex(x,y);
    }
    endShape();
  }
  endShape();
  pop();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series presents an attempt at Moire Patterns.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://mathworld.wolfram.com/MoirePattern.html&quot;&gt;Wolfram Mathworld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‘A Moiré pattern is an interference pattern produced by overlaying similar but slightly offset templates. A simple example is obtained by taking two identical ruled transparent sheets of plastic, superposing them, and rotating one about its center as the other is held fixed. ‘&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;makegrid() divides the canvas into smaller rectangles(cells).&lt;/li&gt;
  &lt;li&gt;Each cell calls render() twice&lt;/li&gt;
  &lt;li&gt;render() draws noise based lines with end points located on a circle. The inclination of the lines changes from one cell to next and the angle by which it shifts is also controlled by noise.&lt;/li&gt;
  &lt;li&gt;The second call to render() does the same except in background colour and rotated by a certain angle wrt the first render()&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Moir%C3%A9_pattern&quot;&gt;Moiré Pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Heart Curve</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/10/post026.html"/>
			<updated>2021-02-10T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/10/post026</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Louis de Bernières:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘The human heart likes a little disorder in its geometry.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/026a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/026b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/026c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/026d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/026e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/026f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/026h.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let s,uang,n;
let simplexNoise;

function setup(){
  createCanvas(600,600);
  //background(179, 162, 188);
  background(0);
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  colors = [color(194, 0, 251),color( 236, 8, 104),color(252, 47, 0),
            color(255, 188, 10),color(255,255,255)];
}

function draw(){
  noLoop();
  // set angle till which heart curve is to be plotted
  uang = 0;
  render();
}

function render(){

  s = 600
  push();
  translate(s/2,s/2);
  rotate(PI);
  // scaling - change this - too high and the shape is off....
  let sc = 1;
  // increment for each cell
  uang += (2*PI)/n;
  // concentric hearts
  // using vertex for some variations and ellipse for others.

  for(let rad = 0.5; rad &amp;lt; 16; rad += 0.25){
    let cl = random(colors);
    cl.setAlpha(20);
    stroke(cl);
    fill(cl);
    // step through the angles
    beginShape();
    for(let ang = 0; ang &amp;lt;= 2*PI; ang += PI/500){
      let x = 16*rad*pow(sin(ang),3);
      let y = rad*(13*cos(ang)-5*cos(2*ang)-2*cos(3*ang)-cos(4*ang));
      let t = millis()/1000;
      // change .1 to .001,.01, etc for variations
      let sn = simplexNoise.noise4D(.1*x,0.1*y,cos(2*PI*t),sin(2*PI*t));
      let rnew = sc*sn;
      // noise based new shifted points
      let xn = 16*rnew*pow(sin(ang),3);
      let yn = rnew*(13*cos(ang)-5*cos(2*ang)-2*cos(3*ang)-cos(4*ang));
      // using vertex for some variations and ellipse for others.
      //vertex(x+xn,y+yn);
      ellipse(x+xn,y+yn,2,2);
    }
    endShape();
  }

  // repeat for inner part - optional , used in some variations
  for(let rad = 0; rad &amp;lt; 10; rad += 0.1){
    let cl = random(colors);
    cl.setAlpha(1);
    stroke(cl);
    fill(255,2);
    // step through the angles
    beginShape();
    for(let ang = 0; ang &amp;lt;= 2*PI; ang += PI/500){
      let x = 16*rad*pow(sin(ang),3);
      let y = rad*(13*cos(ang)-5*cos(2*ang)-2*cos(3*ang)-cos(4*ang));
      let t = millis()/1000;
      // change .1 to .001,.01, etc for variations
      let sn = simplexNoise.noise4D(.01*x,0.01*y,cos(2*PI*t),sin(2*PI*t));
      let rnew = sc*sn;
      // noise based new shifted points
      let xn = 16*rnew*pow(sin(ang),3);
      let yn = rnew*(13*cos(ang)-5*cos(2*ang)-2*cos(3*ang)-cos(4*ang));
      // using vertex for some variations and ellipse for others.
      vertex(x+xn,y+yn);
      //ellipse(x+xn,y+yn,2,2);
    }
    endShape();
  }
  pop();
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series renders the heart curve with some simplex noise introduced in the curve.&lt;/p&gt;

&lt;p&gt;There are a number of different equations that result in heart shaped curves.The one used in this sketch takes on the following parametric form.&lt;/p&gt;

&lt;p&gt;$ x = 16\times\sin^3t$&lt;/p&gt;

&lt;p&gt;$ y = 13\times\cos(t)-5\times\cos(2t)-2\times\cos(3t)-\cos(4t)$&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mathworld.wolfram.com/HeartCurve.html&quot;&gt;Heart Curves&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Lines In A Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/10/post025.html"/>
			<updated>2021-02-10T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/10/post025</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Karl Kraus:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Science is spectral analysis.Art is light synthesis.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/025a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/025b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/025d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/025e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/025f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/025c.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let s;
let colors = [];
let simplexNoise;
let seed;

function setup(){
  createCanvas(600,600);
  background(0);
  // palette
  colors = [color(243, 198, 119),color(123, 30, 122),
            color(179, 63, 98),color(249, 86, 79)];
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  // size of each cell in the grid - change for variaitons
  s = 150;
  // seed to be incremented for every cell, to get a different pattern
  seed = 0;
}

function draw(){
  noLoop();
  makegrid();
}

// make cells along rows and columns
function makegrid(){
  let rows = height/s;
  let cols = width/s;

  // make a grid of cells
  for(let i = -1; i &amp;lt; rows+1; i++){
    for(let j = -1; j &amp;lt; cols+1; j++){
      let x = j*s;
      let y = i*s;
      push();
      translate(x,y);
      // in each cell draw horizontal noisy lines
      // changing the gap between the lines, the noise input etc
      // gives variations
      render();
      pop();
    }
  }
}

// draw in each cell
function render(){
  // gap between lines in each cell, change for variations
  let g = 1;
  // margin to be left for each cell on all sides
  let m = 20;

  strokeWeight(1);
  noFill();
  // change seed for every cell to get different patterns
  seed += 1000;
  let rl = random(colors);
  rl.setAlpha(30);
  stroke(rl);

  // drawing the lines
  for(let i = m; i &amp;lt;= 2*s-m; i+=g){
    let t = millis()/1000;
    // vertical lines
    beginShape();
    for(let x = m; x &amp;lt;= 2*s-m; x+=g){
      // try changing .01 to 0.001,0.1 etc
      let sc = 40;
      let y = i+sc*simplexNoise.noise4D(seed+.01*x,seed+0.01*i,cos(2*PI*t),sin(2*PI*t));
      vertex(y,x);

    }
    endShape();

    // horizontal lines
    beginShape();
    for(let x = m; x &amp;lt;= 2*s-m; x+=g){
      // try changing .01 to 0.001,0.1 etc
      let sc = 40;
      let y = i+sc*simplexNoise.noise4D(seed+.01*x,seed+0.01*i,cos(2*PI*t),sin(2*PI*t));
      vertex(x,y);

    }
    endShape();
  }

  // draw a rectangle in center of every cell
  stroke(255,100);
  fill(0,50);
  rectMode(CENTER);
  for(let k = 0; k &amp;lt; s/5; k+= 3){
    rect(s/2,s/2,k,k);
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series renders noise bases lines in a grid.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;makegrid() divides the canvas into smaller cells&lt;/li&gt;
  &lt;li&gt;from each cell, we call render()&lt;/li&gt;
  &lt;li&gt;render() draws simplex noise based lines both vertically and horizontally.&lt;/li&gt;
  &lt;li&gt;render() follows by drawing nested rectangles in the centre of the cell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The interaction of horizontal and vertical lines creates interesting effects. Variations are obtained by changing noise levels.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Lines and Circles In A Recursive Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/09/post024.html"/>
			<updated>2021-02-09T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/09/post024</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Bruce Lee:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be Water, My Friend.&lt;br /&gt;
Empty your mind.&lt;br /&gt;
Be formless, shapeless, like water.&lt;br /&gt;
You put water into a cup, it becomes the cup.&lt;br /&gt;
You put water into a bottle, it becomes the bottle.&lt;br /&gt;
You put it into a teapot, it becomes the teapot.&lt;br /&gt;
Now water can flow or it can crash.&lt;br /&gt;
Be water, my friend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/024a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/024b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/024c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/024d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/024e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/024f.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// code snippet referenced: https://editor.p5js.org/runemadsen/sketches/rkbBsG_1z

// smallest permitted width or height
//change this for variations
let s = 200;
// simplex noise
let simplexNoise;
let colors = [];
let seed = 0;
let margin = 20;

function setup() {
  createCanvas(600, 600);
  simplexNoise = new OpenSimplexNoise(Date.now());
  // palette
  colors =[color( 91, 192, 235),color(253, 231, 76),color(155, 197, 61),
          color( 195, 66, 63)];
}

function draw(){
  noLoop();
  // call recursive function to divide the canvas
  drawRect(margin,margin, width - 2*margin, height - 2*margin);
}

// recursive division of rectangle
function drawRect(x, y, w, h)
{

  // call the funciton to render sketch for this particular cell
  render(x,y,w,h);

  // then figure out if we need to split this cell further
  let splitWidth = random(1) &amp;gt; 0.5;
  let splitWhere = random(0.3, 0.8);

  // if we're splitting the width
  if(splitWidth &amp;amp;&amp;amp; w &amp;gt; s)
  {
    drawRect(x, y, w * splitWhere, h);
    drawRect(x + (w * splitWhere), y, w * (1 - splitWhere), h);

  }
  // else if we're splitting the height
  else if(h &amp;gt; s)
  {
    drawRect(x, y, w, h * splitWhere);
    drawRect(x, y + (h * splitWhere), w, h * (1 - splitWhere));
  }
}

// final sketch to fill each rectangle with noisy lines
function render(x,y,w,h){

  push();
  translate(x,y);

  // clear previous drawings
  fill(33, 26, 30);
  stroke(0);
  strokeWeight(20);
  rect(0,0, w, h);

  // draw new stuff
  noFill();
  strokeWeight(1);

  // if width greater, fill horizontally
  if(w &amp;gt;= h){
    // spacing between lines
    let sh = h/20;
    // extent of deformation
    let f = 5;
    for(let y = 0; y &amp;lt; h; y+= sh){
      stroke(255,220);
      beginShape();
      for(let x = 0; x &amp;lt; w; x++){
        // change .1 to other values for variations
        let z = f*simplexNoise.noise2D(.05*x,.05*y);
        vertex(x, y+z);
      }
      endShape();
    }
  }
  // if height greater, fill vertically
  else{
    // spacing between lines
    let sw = w/20;
    // extent of deformation
    let f = 5;
    for(let x = 0; x &amp;lt; w; x+=sw){
      stroke(255,220);
      beginShape();
      for(let y = 0; y &amp;lt; h; y++){
        // change .1 to other values for variations
        let z = f*simplexNoise.noise2D(.05*y,.05*x);
        vertex(x+z, y);
      }
      endShape();
    }
  }

  // draw an ellipse at the center of each cell with background color
  // this will clear out the lines drawn in the cell
  fill(33, 26, 30);
  noStroke();
  let rd = min(w,h);
  ellipse(0.5*w+2,0.5*h+2,0.92*rd);
  noFill();

  // now fill this ellipse with a circle of noisy lines
  push();
  translate(0.5*w,0.5*h);
  rotate(random([PI/4,-PI/4,PI/2,0]));
  polygon(0,0,0.4*rd,0,2*PI);
  pop();
  pop();
}

// simple function to draw polygon
// here the polygon is nearly a circle filled with noisy lines
function polygon(x, y, radius, start, end) {
  // colors,alpha etc
  let cl = random(colors);
  cl.setAlpha(230);
  stroke(cl);
  strokeWeight(1);

  push();
  translate(x,y);
  beginShape();
  // change PI/60 according to size of cell
  // this increment decides spacing between lines
  for (let a = start; a &amp;lt; end; a+= PI/60) {
    // get vertex of circle
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;

    let r = 20;
    // change k to change noise
    let k = 0.01;

    // changing height (alog with k value) decides extent of deformation of lines
    let height = 10;
    // drawing the lines
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise2D(seed+k*x,seed+k*sy);
      let y = sy + height*sn;
      vertex(x,y);
    }
    endShape();
  }
  endShape();
  pop();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series renders noise bases lines and circles in a recursive grid.&lt;/p&gt;

&lt;p&gt;The recursive grid follows the same method as followed in &lt;a href=&quot;https://amsykal.github.io/art%20with%20code/2021/01/10/post012.html&quot;&gt;the previous series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code follows these simple steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;drawRect() divides the whole canvas into smaller rectangles recursively.&lt;/li&gt;
  &lt;li&gt;For each rectangle simplex noise lines are drawn horizontally or vertically depending on whether the width is greater or height is greater&lt;/li&gt;
  &lt;li&gt;A circle is drawn in the centre of each rectangle and then this is filled with noise based lines.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Comments further detail the implementation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Mesh</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/09/post023.html"/>
			<updated>2021-02-09T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/09/post023</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Richard Feynman:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Nature uses only the longest threads to weave her patterns, so each small piece of her fabric reveals the organization of the entire tapestry.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/023a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/023b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/023c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/023d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/023e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/023f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/023g.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let simplexNoise;
let colors = [];
// cell size
// change size for variations
let s = 3;

// array to store coordinates of points
let points = [];

function setup(){
  createCanvas(600,600);
  background(0);
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());

  // palette
  colors = [color(46, 134, 171),color( 162, 59, 114),
            color(241, 143, 1),color(199, 62, 29),color(59, 31, 43)];

}

function draw(){
  noLoop();
  background(255);
  push();
  // draw the mesh
  makeGrid();
  render();
  pop();
}

// function to store the points of each cell in the mesh.
function makeGrid(){
  points = [];
  let r = 1.5;
  push();
  let rows = height/s;
  let cols = width/s;
  for(let i = 0; i &amp;lt;= rows+20; i++){
    points[i] = [];
    for(let j = 0; j &amp;lt;= cols+20; j++){
      points[i][j] = [];
      //we start much to left of margin
      // this is so that when we have distorted each rectangle
      // the sketch stretches across the whole width and height
      // without leaving blank areas along margins
      // also notice we use rows and cols + 15 to go way beyond the ends.
      let x = j*s-5*s;
      let y = i*s-5*s;

      // get offset for x and y based on 4d simplex noise
      // 20*s looks nice with s = 5
      // s = 75, 1*s, 2*s
      // s = 50 , 2*s
      // s = 30, 4*s and so on....
      let xx = (50*s)*simplexNoise.noise2D(0.01*x,0.01*y);
      let yy = (50*s)*simplexNoise.noise2D(1000+0.01*x,0.01*y);
      // new corner points
      points[i][j] = [x+xx,y+yy];
    }
  }
  pop();
}

// function to extract the points of each cell and draw it
function render(){
  stroke(255);
  strokeWeight(1);
  noFill();
  // go over the points and stitch them together
  // to form the rectangles
  for(let i = 0; i &amp;lt; points.length-1; i++){
    for(let j = 0; j &amp;lt; points.length-1; j++){
      // get the points of the rectangle (modified)
      let rpoints = [];
      rpoints[0] = [points[i][j][0],points[i][j][1]];
      rpoints[1] = [points[i+1][j][0],points[i+1][j][1]];
      rpoints[2] = [points[i+1][j+1][0],points[i+1][j+1][1]];
      rpoints[3] = [points[i][j+1][0],points[i][j+1][1]];
      let r = 1.5;
      // draw the rectangle with new points
      for(let p = 0; p &amp;lt; 50; p +=1){
        let cl = random(colors);
        cl.setAlpha(55);
        fill(cl);
        stroke(0,20);
        beginShape();
        for (let k = 0; k &amp;lt; rpoints.length; k++){
          let x = rpoints[k][0];
          let y = rpoints[k][1];
          vertex(x-p,y-p);
        }
        endShape(CLOSE);
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series uses simplex noise to ‘weave’ a coloured mesh.We use noise to give a 3 dimensional look.&lt;/p&gt;

&lt;p&gt;The code follows these simple steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;makegrid() divides the whole canvas into small rectangles.&lt;/li&gt;
  &lt;li&gt;Choose a small size for the rectangle.&lt;/li&gt;
  &lt;li&gt;Get the corners of each rectangle.&lt;/li&gt;
  &lt;li&gt;Displace the points using simplex noise.&lt;/li&gt;
  &lt;li&gt;Store the displaced points in a 2d array&lt;/li&gt;
  &lt;li&gt;Use render() to draw the rectangles using these displaced points.&lt;/li&gt;
  &lt;li&gt;The result is a 3d looking mesh.&lt;/li&gt;
  &lt;li&gt;For variations change the size of rectangle ,noise levels, alpha values for colors.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Arcs In A Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/09/post022.html"/>
			<updated>2021-02-09T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/09/post022</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Richard Feynman:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘The thing that doesn’t fit is the thing that’s the most interesting: the part that doesn’t go according to what you expected.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/022a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022g.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022h.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022i.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022j.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022k.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022l.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022m.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022n.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022o.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022p.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/022q.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let s;
let colors = [];
let seed,simplexNoise;

function setup(){
  createCanvas(600,600);
  // change bg according to monochromatic or multihued
  //background(230, 230, 230);
  background(70);
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  seed = 0;
  // palette - monochromatic and multihued
  //colors = [color(12, 32, 32)];
  colors = [color( 228, 87, 46),color(41, 51, 92),color(243, 167, 18),
          color(102, 155, 188),color(168, 198, 134)];
}

function draw(){
  noLoop();
  makeGrid();
}

function makeGrid(){
  // cell size - change for variations
  s = 50;
  let rows = height/s;
  let cols = width/s;
  n = rows*cols;
  let ang = 0;
  for(let i = 0; i &amp;lt; cols; i++){
    for(let j = 0; j &amp;lt; rows; j++){
      let x = i*s+s/2;
      let y = j*s+s/2;
      push();
      translate(x,y);
      // uncomment for rotation
      //rotate(ang);
      render();
      ang += (2*PI)/n;
      seed += 1000;
      pop();
    }
  }
}


function render(){

  // set colors
  let cl = random(colors);
  cl.setAlpha(40);
  stroke(0,120);
  noFill();
  fill(cl);

  // multilined rectangle
  mpolygon(0,0,0.5*s,PI/4,PI/4+2*PI,(2*PI)/4);

  // arc design within each rectangle
  // let random decide direction and placement of arc pattern
  let start,end;
  stroke(5,250);
  let ch = random(1);
  if(ch &amp;lt; 0.25){
    start = 0;
    end = start + PI/2;
    cpolygon(-0.3*s,-0.3*s,0.65*s,start,end,(2*PI)/40);
  }
  else if (ch &amp;lt; 0.5){
    start = PI/2;
    end = start + PI/2;
    cpolygon(0.3*s,-0.3*s,0.65*s,start,end,(2*PI)/40);
  }
  else if (ch &amp;lt; 0.75){
    start = PI;
    end = start + PI/2;
    cpolygon(0.3*s,0.3*s,0.65*s,start,end,(2*PI)/40);
  }
  else{
    start = 1.5*PI;
    end = start + PI/2;
    cpolygon(-0.3*s,0.3*s,0.65*s,start,end,(2*PI)/40);
  }
}

// draw polygon multiple times to get handdrawn effect
function mpolygon(x, y, radius, start, end, inc){
  for(let r = 0; r &amp;lt; 5; r+= 1){
    seed += 1000;
    polygon(x, y, radius, start, end, inc);
  }
}

// used here to draw the patterned arcs
function cpolygon(x, y, radius, start, end, inc){
  for(let r = 10; r &amp;lt; radius; r+= 3){
    seed += 1000;
    polygon(x, y, r, start, end, inc);

  }
}

// n sided polygon defined by start and end angles
// inc is angle between 2 sides
function polygon(x, y, radius, start, end, inc) {
  push();
  translate(x,y);
  beginShape();
  for (let a = start; a &amp;lt;= end; a+= inc) {
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    let t = millis()/1000;
    // change .1 to .001,.01, etc for variations
    let sn = simplexNoise.noise4D(seed+.001*x,seed+0.001*y,cos(2*PI*t),sin(2*PI*t));
    let sc = 10;
    let sx1 = sx + sc*sn;
    let sy1 = sy + sc*sn;
    // original and displaced vertices - gives a back and forth line stroke
    vertex(sx,sy);
    vertex(sx1,sy1);
  }
  endShape();
  pop();
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This presents arc based patterns in a grid.There is an attempt to make the sketches appear hand drawn.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;makegrid() divides the canvas into a grid of cells&lt;/li&gt;
  &lt;li&gt;each cell calls render()&lt;/li&gt;
  &lt;li&gt;render() in turn calls mpolygon() followed by multiple calls to cpolygon() to draw patterned arcs&lt;/li&gt;
  &lt;li&gt;mpolygon() depends on time based simplex noise to draw rectangles that appear hand drawn.&lt;/li&gt;
  &lt;li&gt;calls to cpolygon() is randomized. random function decides the orientation of arcs&lt;/li&gt;
  &lt;li&gt;cpolygon() draws concentric arcs by calling polygon() function&lt;/li&gt;
  &lt;li&gt;polygon() finally renders the arcs which is also controlled by simplex noise.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More details of implementation can be found as comments in the code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Circles And A Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/09/post021.html"/>
			<updated>2021-02-09T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/09/post021</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Edwin Markham:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘He drew a circle that shut me out —&lt;br /&gt;
Heretic, rebel, a thing to flout.&lt;br /&gt;
But Love and I had the wit to win:&lt;br /&gt;
We drew a circle that took him in!’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/021a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021g.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021h.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021i.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/021j.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let simplexNoise;
let s;
let colors = [];

function setup(){
  createCanvas(600,600);
  simplexNoise = new OpenSimplexNoise(Date.now());
  colors = [color(127, 183, 190),color(211, 243, 238),
            color(218, 204, 62),color(188, 44, 26),
            color(125, 21, 56)];
}

function draw(){
  noLoop();
  background(255);
  // size of each cell - change for variations
  s = 60;
  makegrid1();
  render();
  makegrid();
}

// initial grid of cells that colors them with a random color
function makegrid1(){
  let rows = height/s;
  let cols = width/s;
  noFill();
  for(let i = -1; i &amp;lt;= rows; i++){
    for(let j = -1; j &amp;lt;= cols; j++){
        let x = j*s;
        let y = i*s;
        push();
        translate(x,y);
        strokeWeight(6);
        stroke(255);
        let cl = random(colors);
        cl.setAlpha(255);
        fill(cl);
        rect(0,0,s,s);
        pop();
    }
  }
}

// draw the black noisy circles
function render(){
  //cpolygon(-50,-50,2*width, 0, 2*PI, PI/250);
  //cpolygon(width+100,height+100,2*width, 0, 2*PI, PI/250);
  //cpolygon(width+50,-50,2*width, 0, 2*PI, PI/250);
  //cpolygon(-50,height+50,2*width, 0, 2*PI, PI/250);
  cpolygon(0.5*width,0.5*height,2*width, 0, 2*PI, PI/250);
  cpolygon(0.5*width,0.5*height,0.1*width, 0, 2*PI, PI/6);
  //cpolygon(width+50,height+50,2*width, 0, 2*PI, PI/500);
  //seed += 1000;
}

function cpolygon(x, y, radius, start, end, inc){
  // change 10 (spacing between concentric circles to other values )
  for(let r = 0; r &amp;lt; radius; r+= 10){
    start = random(2*PI);
    mpolygon(x, y, r, start, start+2*PI, inc);
  }
}

// draw rectangle(polygon) multiple times to get handdrawn effect
function mpolygon(x, y, radius, start, end, inc){
  for(let r = 0; r &amp;lt; 4; r+= 0.5){
    //seed += 1000;
    polygon(x+r, y+r, radius, start, end, inc);
  }
}

function polygon(x, y, radius, start, end, inc) {

  push();
  translate(x,y);
  beginShape();
  for (let a = start; a &amp;lt;= end; a+= inc) {
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    // change scaling from 1 to 20 for variations
    let r = 10;
    let t = millis()/1000;
    // change noise .05 to .1,.2,.01 etc
    let rn = simplexNoise.noise4D(.05*x,0.05*sy,r*cos(2*PI*t),r*sin(2*PI*t));
    let sx2 = sx + r*rn*cos(a);
    let sy2 = sy + r*rn*sin(a);
    stroke(0,255);
    strokeWeight(1);
    noFill();
    // change for variaiotns by uncommenting original vertex
    //vertex(sx,sy);
    vertex(sx2,sy2);
  }
  endShape(CLOSE);
  pop();
}

// grid that draws the borders for rectangles
// this breaks the circles rendered making them
// appear like they have been drawn as hatches for each rectangle
function makegrid(){
  let rows = height/s;
  let cols = width/s;
  noFill();
  for(let i = -1; i &amp;lt;= rows; i++){
    for(let j = -1; j &amp;lt;= cols; j++){
        let x = j*s;
        let y = i*s;
        push();
        translate(x,y);
        strokeWeight(6);
        stroke(255);
        noFill();
        rect(0,0,s,s);
        if(random(1) &amp;gt; 0.95){
          //for variations uncomment the following 2 lines
          fill(0);
          ellipse(0,0,s,s);
        }
        pop();
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This is a series which draws noisy circles over a grid of rectangles filled with random colours.&lt;/p&gt;

&lt;p&gt;The code is a bit messy and roughly works as follows.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;makeGrid1() draws rectangles in the form of a grid filled with different random colours (chosen from a fixed palette)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;render() draws concentric noisy circles over this grid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;render() first calls cpolygon() which is a function to draw concentric polygons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cpolygon() calls mpolygon() which is a function to draw each noisy circle.To make the circle appear hand drawn mpolygon() calls polygon() function&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;polygon() function draws the noisy circle.The circle is drawn with same radius on each call but noise levels are different on each call to the function.To change the noise on each call, time based simplex noise is used as below.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let t = millis()/1000;
 // change noise .05 to .1,.2,.01 etc
 let rn = simplexNoise.noise4D(.05*x,0.05*sy,r*cos(2*PI*t),r*sin(2*PI*t));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Since t changes on each call the noise also changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally makegrid() is called to draw the borders for the original rectangles drawn in makegrid1().This breaks the circles rendered making them appear like they have been drawn as hatches for each rectangle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Concentric Arcs in A Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/09/post020.html"/>
			<updated>2021-02-09T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/09/post020</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Stephen Chbosky, The Perks of Being a Wallflower:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘I don’t know if you’ve ever felt like that. That you wanted to sleep for a thousand years. Or just not exist. Or just not be aware that you do exist. Or something like that. I think wanting that is very morbid, but I want it when I get like this. That’s why I’m trying not to think. I just want it all to stop spinning.’’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/020e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/020f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/020g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/020h.png&quot; /&gt;
&lt;img src=&quot;/images/020i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/020j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/020a.png&quot; /&gt;
&lt;img src=&quot;/images/020b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/020c.png&quot; /&gt;
&lt;img src=&quot;/images/020d.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// concentric arcs in a grid
// size of each cell
let s;


function setup()
{
  createCanvas(600,600);
  // palette option 1
  background( 23, 28, 51);
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
  // palette option 2
  // background(0);
  // colors = [color(173, 88, 103),color( 87, 115, 153),color(189, 213, 234)
  //            ,color(247, 247, 255), color(254, 95, 85)];

}

function draw()
{
  noLoop();
  push();
  makeGrid();
  pop();
}

// create the grid
function makeGrid(){

  // size of each cell
  s = 300;

  // get number of rows and columns
  let rows = height/s;
  let cols = width/s;

  // for each cell
  for(let i = 0; i &amp;lt; rows; i++){
    for(let j = 0; j &amp;lt; cols; j++){
      push();
      translate(i*s+s/2, j*s+s/2);
      // fill the cell with arcs
      render();
      pop();
    }
  }

}

// the final arc drawing in each cell
function render(){

  // radius of innermost arc
  let rmin = 0.01*s;

  // radius of outermost arc
  let rmax = 0.42*s;

  // spacing between arcs
  let rinc = 6;

  // spacing between segments of arc of same radius
  let inc = PI/1000;
  // spacing between concurrent arcs starting point
  let offset = 0;

  for(let r = rmin; r&amp;lt;rmax; r+=rinc ){
    // each arc of same radius with a random color
    // or make it black and white
    let cl = random(colors);
    // while filling uncomment the line below - gives a glassy look to the arcs
    cl.setAlpha(60);
    fill(cl);
    strokeWeight(3);
    stroke(cl);
    // comment line below if you want fill
    //noFill();
    let j = 0;
    for(let a = offset; a &amp;lt; 2*PI+offset ; a+= inc){
      if (j%2 == 0){
        // add CHORD to line below for another variaiton
          arc(0,0,2*r,2*r,a-inc/2,a+inc/2);
        }
        j += 1;
    }

    // try playing around with these values to get variations
    // removing random gives more symmetric and predictable patterns
    inc += random(PI/75);
    offset -= random(PI/75);
  }
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series presents concentric arc based patterns in a grid.&lt;/p&gt;

&lt;p&gt;makeGrid() takes care of dividing the canvas into mini canvases.(cells in a grid).render() is called from each cell to then draw patterns of concentric arcs.&lt;/p&gt;

&lt;p&gt;Variations include randomising colours, angles at which arcs are drawn, spacing between arcs, grid size etc.&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Meshes in A Grid: Coloured Version </title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/09/post019.html"/>
			<updated>2021-02-09T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/09/post019</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Michael Shermer:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Humans are pattern-seeking story-telling animals, and we are quite adept at telling stories about patterns, whether they exist or not.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/019a.png&quot; /&gt;
&lt;img src=&quot;/images/019b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019h.png&quot; /&gt;
&lt;img src=&quot;/images/019i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019l.png&quot; /&gt;
&lt;img src=&quot;/images/019m.png&quot; /&gt;
&lt;img src=&quot;/images/019n.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019o.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019p.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/019q.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid
// grid is divided into cells (makeGrid1)
// in each cell, we draw a mesh
// this mesh is created using noise (makeGrid)
// render the mesh (render)
// code same as sketch 19 except this is in color
// for variations change cell size, mesh cell size, noise levels

let simplexNoise;
let colors = [];
// cell size
// change size for variations
let s;
let c,k;

// array to store coordinates of points
let points = [];

function setup(){
  createCanvas(600,600);
  background(0);
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  // palette , used in this sketch
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
  // set intial noise
  k = 0.005;
}

function draw(){
  noLoop();
  background(255);
  push();
  // divide grid into cells
  makeGrid1();
  pop();
}

function makeGrid1(){
  // size of each cell in grid, change for variations
  c = 150;
  let rows = height/c;
  let cols = width/c;
  noFill();
  for(let i = 1; i &amp;lt; rows-1; i++){
    for(let j = 1; j &amp;lt; cols-1; j++){
      let x = j*c
      let y = i*c
      push();
      translate(x,y);
      // create the mesh
      makeGrid();
      // draw the mesh
      render();
      pop();
    }
  }
}

// function to store the points of each cell in the mesh.
function makeGrid(){
  // size of each cell of mesh within each cell of grid
  s = 8;
  points = [];
  let r = 2;
  push();
  // spacing between rows and columns
  let rows = 0.8*c/s;
  let cols = 0.8*c/s;
  for(let i = 0; i &amp;lt;= rows; i++){
    points[i] = [];
    for(let j = 0; j &amp;lt;= cols; j++){
      points[i][j] = [];
      let x = j*s+s/2;
      let y = i*s+s/2;
      // get offset for x and y based on 4d simplex noise
      // change 6*s to s, 2*s etc
      // higher values -- noisier
      let xx = (1*s)*simplexNoise.noise2D(k*x,k*y);
      let yy = (1*s)*simplexNoise.noise2D(1000+k*x,k*y);
      // new corner points
      points[i][j] = [x+xx,y+yy];
    }
  }
  pop();
}

// function to extract the points of each cell and draw it
function render(){
  k += 0.001;
  // go over the points and stitch them together
  // to form the rectangles
  for(let i = 0; i &amp;lt; points.length-1; i++){
    for(let j = 0; j &amp;lt; points.length-1; j++){
      // get the points of the rectangle (modified)
      let rpoints = [];
      rpoints[0] = [points[i][j][0],points[i][j][1]];
      rpoints[1] = [points[i+1][j][0],points[i+1][j][1]];
      rpoints[2] = [points[i+1][j+1][0],points[i+1][j+1][1]];
      rpoints[3] = [points[i][j+1][0],points[i][j+1][1]];
      let r = 1.5;
      // draw the rectangle with new points
      noFill();
      stroke(0);
      strokeWeight(2);
      let cl = random(colors);
      cl.setAlpha(255);
      fill(cl);
      for (let p = 0; p &amp;lt; 1; p+=1){
        beginShape();
        for (let k = 0; k &amp;lt; rpoints.length; k++){
          let x = rpoints[k][0];
          let y = rpoints[k][1];
          vertex(x+p,y+p);
        }
        endShape(CLOSE);
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series is the coloured version of the &lt;a href=&quot;&quot;&gt;previous series&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Meshes in A Grid </title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/08/post018.html"/>
			<updated>2021-02-08T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/08/post018</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Simon &amp;amp; Garfunkel:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Impaled on my wall&lt;br /&gt;
   My eyes can dimly see&lt;br /&gt;
   The pattern of my life&lt;br /&gt;
   And the puzzle that is me&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;From the moment of my birth&lt;br /&gt;
   To the instant of my death&lt;br /&gt;
   There are patterns I must follow&lt;br /&gt;
   Just as I must breathe each breath&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like a rat in a maze&lt;br /&gt;
   The path before me lies&lt;br /&gt;
   And the pattern never alters&lt;br /&gt;
   Until the rat dies.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/018a.png&quot; /&gt;
&lt;img src=&quot;/images/018b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018h.png&quot; /&gt;
&lt;img src=&quot;/images/018i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/018l.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid
// grid is divided into cells (makeGrid1)
// in each cell, we draw a mesh
// this mesh is created using noise (makeGrid)
// render the mesh (render)
// this series render in black and white
// next set is the same code but in color
// for variations change cell size, mesh cell size, noise levels

let simplexNoise;
let colors = [];
// cell size
// change size for variations
let s;
let c,k;

// array to store coordinates of points
let points = [];

function setup(){
  createCanvas(600,600);
  background(0);
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  // palette , used in next sketch
  // this sketch is black and white
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
  // set intial noise
  k = 0.005;
}

function draw(){
  noLoop();
  background(255);
  push();
  // divide grid into cells
  makeGrid1();
  pop();
}

function makeGrid1(){
  // size of each cell in grid, change for variations
  c = 120;
  let rows = height/c;
  let cols = width/c;
  noFill();
  for(let i = 1; i &amp;lt; rows-1; i++){
    for(let j = 1; j &amp;lt; cols-1; j++){
      let x = j*c
      let y = i*c
      push();
      translate(x,y);
      // create the mesh
      makeGrid();
      // draw the mesh
      render();
      pop();
    }
  }
}

// function to store the points of each cell in the mesh.
function makeGrid(){
  // size of each cell of mesh within each cell of grid
  s = 6;
  points = [];
  let r = 2;
  push();
  // spacing between rows and columns
  let rows = 0.8*c/s;
  let cols = 0.8*c/s;
  for(let i = 0; i &amp;lt;= rows; i++){
    points[i] = [];
    for(let j = 0; j &amp;lt;= cols; j++){
      points[i][j] = [];
      let x = j*s+s/2;
      let y = i*s+s/2;
      // get offset for x and y based on 4d simplex noise
      // change 6*s to s, 2*s etc
      // higher values -- noisier
      let xx = (2*s)*simplexNoise.noise2D(k*x,k*y);
      let yy = (2*s)*simplexNoise.noise2D(1000+k*x,k*y);
      // new corner points
      points[i][j] = [x+xx,y+yy];
    }
  }
  pop();
}

// function to extract the points of each cell and draw it
function render(){
  k += 0.001;
  // go over the points and stitch them together
  // to form the rectangles
  for(let i = 0; i &amp;lt; points.length-1; i++){
    for(let j = 0; j &amp;lt; points.length-1; j++){
      // get the points of the rectangle (modified)
      let rpoints = [];
      rpoints[0] = [points[i][j][0],points[i][j][1]];
      rpoints[1] = [points[i+1][j][0],points[i+1][j][1]];
      rpoints[2] = [points[i+1][j+1][0],points[i+1][j+1][1]];
      rpoints[3] = [points[i][j+1][0],points[i][j+1][1]];
      let r = 1.5;
      // draw the rectangle with new points
      noFill();
      stroke(0);
      strokeWeight(2);
      let cl = random(colors);
      cl.setAlpha(255);
      //fill(cl);
      for (let p = 0; p &amp;lt; 1; p+=1){
        beginShape();
        for (let k = 0; k &amp;lt; rpoints.length; k++){
          let x = rpoints[k][0];
          let y = rpoints[k][1];
          vertex(x+p,y+p);
        }
        endShape(CLOSE);
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series presents noisy meshes in a grid.&lt;/p&gt;

&lt;p&gt;First we make a grid dividing the canvas into smaller canvases or cells.The function makeGrid1() performs this task.&lt;/p&gt;

&lt;p&gt;Next, we loop through the cells and in each cell we make a mesh.
This is done by first storing the points of each corner of the cells (rectangles) in the mesh in a 2d array.But before storing them, we slightly displace the points using simplex noise.The function makeGrid() handles this task.&lt;/p&gt;

&lt;p&gt;Next we call render() to draw the rectangles.&lt;/p&gt;

&lt;p&gt;This is done by first extracting the points from the 2d array and then stitching them back together.&lt;/p&gt;

&lt;p&gt;The comments in the code walks you through the process.&lt;/p&gt;

&lt;p&gt;The variations result from using different grid sizes and noise levels.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Lines in A Grid </title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/08/post017.html"/>
			<updated>2021-02-08T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/08/post017</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Chuck Palahniuk:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘There are only patterns, patterns on top of patterns, patterns that affect other patterns.Patterns hidden by patterns.Patterns within patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you watch close, history does nothing but repeat itself.
What we call chaos is just patterns we haven’t recognized.What we call random is just patterns we can’t decipher. what we can’t understand we call nonsense. What we can’t read we call gibberish.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is no free will.
There are no variables.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/017a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017g.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017h.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/017i.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid
// every cell has horizontal noisy lines
// diagonal lines in background color drawn
// effect - broken scribbles
// noise level, cell size changed for variations

let s;
let simplexNoise;
let seed;

function setup(){
  createCanvas(600,600);
  background(23, 28, 51);
  // palette
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  // cell size
  s = 200;
  // seed to be incremented for every cell
  seed = 0;
}

function draw(){
  noLoop();
  makegrid();
}

function makegrid(){
  let rows = height/s;
  let cols = width/s;
  // make a grid of cells
  // g is gap between lines within a cell
  let g = 10;
  for(let i = 0; i &amp;lt; rows; i++){
    for(let j = 0; j &amp;lt; cols; j++){
      let x = j*s;
      let y = i*s;
      push();
      translate(x,y);
      // in each cell draw horizontal noisy lines
      // changing the gap between the lines, the noise input etc
      // gives variations
      render(g);
      pop();
    }
    // the gap between 2 lines within a cell
    // we increment this gap by 2 for every row
    // so as we go down the rows there is more space
     g += 2;
  }
}

function render(g){

  // set color, style etc
  let fl = color(238, 240, 242);
  fl.setAlpha(255);
  stroke(fl);
  noFill();
  strokeWeight(2);

  // margin to be left for each cell on all sides
  let m = 12;

  // change seed for every cell to get different patterns
  seed += 1000
  // drawing the lines
  for(let i = m; i &amp;lt;= s-m; i+=g){
    //let t = millis()/1000;
    beginShape();
    for(let x = m; x &amp;lt;= s-m; x+=g){
      // try changing .01 to 0.001,0.1 etc
      let sc = 10;
      // change .01 to different values and combinations for y1 y2
      let y1 = i+sc*simplexNoise.noise2D(seed+.05*x,seed+0.05*i);
      let y2 = i+sc*simplexNoise.noise2D(2*seed+.1*x,2*seed+0.1*i);
      vertex(x,y1);
      vertex(x,y2);
    }
    endShape();
  }

  //diagonal lines to insert breaks in each horizontal line
  for(let i = m; i &amp;lt;= s-m; i+= 2*g){
    strokeWeight(2);
    stroke(23, 28, 51);
    line(0,i,i,0);
    line(s-m,i,i,s-m);
  }

}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series presents noisy lines in a grid.&lt;/p&gt;

&lt;p&gt;The method used is very similar to the one used in &lt;a href=&quot;https://amsykal.github.io/art with code/2021/01/03/post008.html&quot;&gt;this previous series implementing noisy lines in a grid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give the appearance of scribbles , the code introduces breaks between the horizontal lines by drawing spaced diagonal lines as below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//diagonal lines to insert breaks in each horizontal line
for(let i = m; i &amp;lt;= s-m; i+= 2*g){
  strokeWeight(2);
  stroke(23, 28, 51);
  line(0,i,i,0);
  line(s-m,i,i,s-m);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Circles</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/02/08/post016.html"/>
			<updated>2021-02-08T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/02/08/post016</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Until the Ribbon Breaks:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Sitting ducks on razor blades&lt;br /&gt;
Just waiting to be swallowed by the soup,&lt;br /&gt;
The repetition of a bad dream&lt;br /&gt;
A loop within a loop within a loop’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/016a.png&quot; /&gt;
&lt;img src=&quot;/images/016b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016h.png&quot; /&gt;
&lt;img src=&quot;/images/016i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/016l.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// circles based on simplex noise
// 3 sets of circles with different shades (colors)

let simplexNoise,seed;

function setup(){
  createCanvas(600,600);
  background(255, 235, 196);
  simplexNoise = new OpenSimplexNoise(Date.now());
}

function draw(){
  noLoop();
  push();
  // shift origin to center
  translate(width/2,height/2);
  // draw the sketch
  render();
  pop();
}

function render(){
  // set up the colors
  // we alternate between cl and sl for different sets of circles

  let cl = color(15, 19, 57);
  cl.setAlpha(100);
  let sl = color(255, 235, 196);
  sl.setAlpha(75);
  noFill();

  // outer most circles
  stroke(cl);
  for(let r = 100; r &amp;lt; 600; r += 20){
    let start = random(2*PI);
    let end = start + random(2*PI);
    polygon(r/2,start,start+2*PI);
  }

  // second set
  stroke(sl);
  for(let r = 50; r &amp;lt; 350; r += 20){
    let start = random(2*PI);
    let end = start + random(2*PI);
    polygon(r/2,start,start+2*PI);
  }

  // third set
  stroke(cl);
  for(let r = 50; r &amp;lt; 250; r += 20){
    let start = random(2*PI);
    let end = start + random(2*PI);
    polygon(r/2,start,start+2*PI);
  }

  //inner most circles
  stroke(sl);
  for(let r = 50; r &amp;lt; 100; r += 20){
    let start = random(2*PI);
    let end = start + random(2*PI);
    polygon(r/2,start,start+2*PI);
  }
}

// simple function to draw polygon of any number of sides
function polygon(radius, start, end) {
  beginShape();
  // choose small increment for a so we get a circle
  for (let a = start; a &amp;lt; end; a+= PI/250) {
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    // change r from 5 to 75 for variations
    let r = 50;
    // change .005 from .001 to 0.5 for variations
    let rn = simplexNoise.noise2D(0.05*sx,0.05*sy);
    let sx1 = sx + r*rn*cos(a);
    let sy1 = sy + r*rn*sin(a);
    // for variations uncomment the line below
    //vertex(sx,sy);
    vertex(sx1,sy1);
    line(0,0,sx1,sy1)
  }
  endShape();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series uses 2d simplex noise to make circles.&lt;/p&gt;

&lt;p&gt;4 sets of circles are drawn with alternating colours.&lt;/p&gt;

&lt;p&gt;Variations include changing noise levels and alpha values.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Arcs in Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/27/post015.html"/>
			<updated>2021-01-27T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/27/post015</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Ethan Canin:’What’s more interesting than the arc of lives?’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/015a.png&quot; /&gt;
&lt;img src=&quot;/images/015b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015h.png&quot; /&gt;
&lt;img src=&quot;/images/015i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015l.png&quot; /&gt;
&lt;img src=&quot;/images/015m.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/015n.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid
// divide into cells
// further divide each cells into more subcells randomly
// end result - different rcell sizes
// each cell is filled with arcs
// arcs face random directions and have random colors
// directions - top right, bottom right, top left, bottom left
// other variations - spacing between arcs, noise level, fill or no fill
// alpha levels and strokeWeights

let s,c;
let colors = [];
let simplexNoise;
let seed;

function setup(){
  createCanvas(600,600);
  background(250);
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  seed = 100;
  colors = [color( 1, 41, 95),color( 67, 127, 151),color(132, 147, 36),
            color(255, 179, 15),color(253, 21, 27)];
}

function draw(){
  noLoop();
  makeGrid();
}

function makeGrid(){
  // size of each cell in grid, change for variations
  c = 60;
  let rows = height/c;
  let cols = width/c;
  for(let i = 1; i &amp;lt; rows-1; i++){
    for(let j = 1; j &amp;lt; cols-1; j++){
      let x = j*c;
      let y = i*c;
      push();
      translate(x,y);
      // choose whether or not to break a cell further
      let ch = random(1);
      if (ch &amp;lt;= 0.5){
        render(c);
      }
      else {
        // break the cell into n subcells
        let n = random([2,3]);
        breakCell(n);
      }
      pop();
    }
  }
}

// further break down of each cell in the grid
function breakCell(n){
  s = c/n;
  for(let i = 0; i &amp;lt; n; i++){
    for(let j = 0; j &amp;lt; n; j++){
      let x = j*s;
      let y = i*s;
      push();
      translate(x,y);
      render(s);
      pop();
    }
  }
}

// rendering for each cell
function render(s){

  // set up colors
  // draw rectangles to partition and create margins between cells
  fill(250);
  strokeWeight(6);
  stroke(250);
  rect(0,0,s,s);


  let cl = random(colors);
  // change alpha
  cl.setAlpha(220);
  // option 1
  strokeWeight(1);
  stroke(0);
  fill(cl);
  // option 2
  // change weight
  strokeWeight(3);
  //stroke(cl);
  //noFill();

  // deciding direction for arcs based on random
  let k = 1
  let ch = random(1);
  if (ch &amp;lt; 0.25){
    cp(0,0,k*s,0,PI/2)
  }
  else if (ch &amp;lt; 0.5){
    cp(k*s,0,k*s,PI/2,PI);
  }
  else if (ch &amp;lt; 0.75){
    cp(0,k*s,k*s,1.5*PI,2*PI);
  }
  else {
    cp(k*s,k*s,k*s,PI,1.5*PI);
  }
}

// concentric arcs
function cp(x, y, radius,start,end) {
  for(let r = 0; r &amp;lt; radius; r+= 4){
    polygon(x, y, r,start,end);

  }
  // uncomment if you want lines within arcs
  //polygon1(x, y,radius,start,end)
}

// to draw arcs
function polygon(x, y, radius,start,end) {
  push();
  translate(x,y);
  beginShape();
  // drawing arcs
  for (let a = start - PI/100; a &amp;lt;= end+PI/100; a+= PI/150) {
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    // change r to change noise levels
    let r = 6;
    let rn = simplexNoise.noise2D(seed+.025*x,seed+.025*sy);
    let sx1 = sx + r*rn*cos(a);
    let sy1 = sy + r*rn*sin(a);
    //vertex(sx,sy);
    vertex(sx1,sy1);
  }
  endShape();
  pop();

}

// to draw lines within arcs
function polygon1(x, y, radius,start,end) {
  push();
  translate(x,y);
  beginShape();
  for (let a = start - PI/100; a &amp;lt;= end+PI/100; a+= PI/10) {
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    // some variations have white lines intersecting black arcs -
    // gives broken arc appearance
    strokeWeight(1);
    stroke(0);
    line(0,0,sx,sy);
  }
  endShape();
  pop();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series of sketches presents arcs.&lt;/p&gt;

&lt;p&gt;The canvas is first divided into cells of uniform size.&lt;/p&gt;

&lt;p&gt;Each cell is further divided into a random number of subcells.
In each subcell, concentric arcs are drawn.&lt;/p&gt;

&lt;p&gt;Variations are obtained in a number of ways like randomising colours, spacing between arcs,orientation of arc,using filled arcs or just using the outlines,noise levels (of 2d simplex noise)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Lines in a Recursive Grid</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/14/post014.html"/>
			<updated>2021-01-14T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/14/post014</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Stephen Hawking: ‘To understand recursion, one must first understand recursion.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/014a.png&quot; /&gt;
&lt;img src=&quot;/images/014b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014h.png&quot; /&gt;
&lt;img src=&quot;/images/014i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014l.png&quot; /&gt;
&lt;img src=&quot;/images/014m.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014n.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/014o.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// code snippet referenced: https://editor.p5js.org/runemadsen/sketches/rkbBsG_1z
// we use recursive division to split a rectangle
// eachr rectangle is then filled with noisy lines
// the noisy lines are drawn vertically when height &amp;gt; width
// horizontally when width &amp;gt; height
// randomize color choice
// variations include change in rectangle size and choice of noise level

// margin
let margin = 0

// smallest permitted width or height
//change this for variations
let s = 20;
// to store palette
let colors = [];
// simplex noise
let simplexNoise;



function setup() {
  createCanvas(600, 600);
  simplexNoise = new OpenSimplexNoise(Date.now());
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
}

function draw(){
  noLoop();
  drawRect(margin,margin, width - 2*margin, height - 2*margin);
}

// recursive division of rectangle
function drawRect(x, y, w, h)
{

  render(x,y,w,h);
  // then figure out if we need to draw another
  let splitWidth = random(1) &amp;gt; 0.5;
  let splitWhere = random(0.3, 0.8);

  // if we're splitting the width
  if(splitWidth &amp;amp;&amp;amp; w &amp;gt; s)
  {
    drawRect(x, y, w * splitWhere, h);
    drawRect(x + (w * splitWhere), y, w * (1 - splitWhere), h);

  }
  // else if we're splitting the height
  else if(h &amp;gt; s)
  {
    drawRect(x, y, w, h * splitWhere);
    drawRect(x, y + (h * splitWhere), w, h * (1 - splitWhere));
  }
}

// final sketch to fill each rectangle with noisy lines
function render(x,y,w,h){

  push();
  translate(x,y);

  // clear previous drawings
  let cl = random(colors);
  fill( 23, 28, 51);
  stroke(0);
  strokeWeight(8);
  w = 2*w;
  h = 2*h;
  rect(0,0,w,h);

  strokeWeight(2);
  let sl = random(colors);
  sl.setAlpha(255);
  stroke(sl);

  // some sketches have both horizontal and vertical lines

  // if width greater, fill horizontally
  if(w &amp;gt;= h){
    let sh = h/10;
    for(let y = 0; y &amp;lt; h; y+= sh){
      // draw new stuff

      beginShape();
      for(let x = 0; x &amp;lt; w; x++){
        // change .1 to other values for variations
        let z = sh*simplexNoise.noise2D(.1*x,.1*y);
        //fill(random(colors));
        vertex(x, y+z);
      }
      endShape();
    }
  }
  // if height greater, fill vertically
  else{
    let sw = w/10;
    for(let x = 0; x &amp;lt; w; x+=sw){
      beginShape();
      for(let y = 0; y &amp;lt; h; y++){
        // change .1 to other values for variations
        let z = sw*simplexNoise.noise2D(.1*y,.1*x);
        vertex(x+z, y);
      }
      endShape();
    }
  }
  pop();

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series is a combination of &lt;a href=&quot;https://amsykal.github.io/art with code/2021/01/10/post012.html&quot;&gt;the series using recursive division&lt;/a&gt; and &lt;a href=&quot;https://amsykal.github.io/art with code/2021/01/03/post008.html&quot;&gt;the series implementing noisy lines in a grid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In each rectangle obtained by recursive division, we draw simplex noise based lines.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Hexagons</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/11/post013.html"/>
			<updated>2021-01-11T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/11/post013</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Johannes Kepler: ‘There must be some definite cause why, whenever snow begins to fall, its initial formations invariably display the shape of a six-cornered starlet. For if it happens by chance, why do they not fall just as well with five corners or with seven? Why always with six?.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/013b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013h.png&quot; /&gt;
&lt;img src=&quot;/images/013i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/013k.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// basic rectangle division
// repeated division of rectangle into smaller rectangles
// concentric hexagons in each rectangle

// smallest permitted width or height
// change s for variations
let s = 100;
// to store palette
let colors = [];
let margin = 0

function setup() {
  createCanvas(600, 600);
  colors = [color(31, 32, 65),color(75, 63, 114),
            color(255, 200, 87),color(17, 157, 164),color( 25, 100, 126)]
}

function draw(){
  background(255);
  noLoop();
  push();
  // call recursive div algorithm
  drawRect(margin,margin, width - 2*margin, height - 2*margin);
  pop();

}

// recursive division of rectangle
function drawRect(x, y, w, h)
{
  // draw the hexagons within the rectangle
  render(x,y,w,h);
  // then figure out if we need to draw another
  let splitWidth = random(1) &amp;gt; 0.5;
  let splitWhere = random(0.3, 0.8);

  // if we're splitting the width
  if(splitWidth &amp;amp;&amp;amp; w &amp;gt; s)
  {
    drawRect(x, y, w * splitWhere, h);
    drawRect(x + (w * splitWhere), y, w * (1 - splitWhere), h);

  }
  // else if we're splitting the height
  else if(h &amp;gt; s)
  {
    drawRect(x, y, w, h * splitWhere);
    drawRect(x, y + (h * splitWhere), w, h * (1 - splitWhere));
  }
}



// final sketch to draw rectangles
function render(x,y,w,h){

  push();
  // move center to x,y
  translate(x,y);
  strokeWeight(4);
  let fl = random(colors);
  fl.setAlpha(100);
  fill(fl);
  // variation stroke black, white
  stroke(5);
  rect(0,0, w, h);
  strokeWeight(2);
  let cl = random(colors);
  cl.setAlpha(120);
  // variation stroke black, white, colors
  stroke(5);
  //stroke(random(colors));
  // remove fill for black and white variation
  fill(cl);

  // set n to 6 to draw hexagons
  let n = 6;

  // variation
  // this decides orientation of the hexagon
  //fixed angle 0 , PI/6
  //let a = 0 ;
  let a = PI/6;
  //let a = random(2*PI);

  // variation - concentric hexagons
  cPolygon(w/2,h/2,min(w/2,h/2),n,a);
  pop();

}

// simple function to draw polygon of any number of sides
// in this case hexagons
// x, y - center
// radius - distance between center and vertex of hexagon
// angle - orientation of hexagon
function polygon(x, y, radius, sides = 3, angle = 0) {

  push();
  translate(x,y);
  beginShape();
  for (let i = 0; i &amp;lt; sides; i+=1) {
    let a = angle + TWO_PI * (i / sides);
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
  pop();

}

// simple function to draw concentric polygons of any number of sides
function cPolygon(x, y, radius, sides = 3, angle = 0,offset = 0) {
  for(let i = radius; i &amp;gt; 4; i-=10){
    polygon(x,y,i,sides,angle);
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This series builds on top of the &lt;a href=&quot;https://amsykal.github.io/project%20euler/2021/01/10/post012.html&quot;&gt;previous series using recursive division&lt;/a&gt;.
In each rectangle, we render concentric regular hexagons.&lt;/p&gt;

&lt;p&gt;Even a casual observer of nature is unlikely to miss the recurring presence of hexagons in everything from beehives to Devils Postpile.&lt;/p&gt;

&lt;p&gt;Kepler’s essay on The Six Cornered Snowflake , A New Year’s Gift is not only a good start for us to start wondering about “why hexagons” but also a beautiful exposition on the workings of his mind, the brilliance,genius and playfulness of his thought process.What is fascinating is that such a seemingly simple question remained unanswered for nearly 300 years after Kepler first made an attempt.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://larouchepac.com/snowflake&quot;&gt;Six Cornered Snowflake - By Johannes Kepler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bbc.co.uk/programmes/w3csy5b7&quot;&gt;Kepler’s Snowflake, BBC Science Stories&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.scientificamerican.com/article/why-are-snowflakes-symmet/&quot;&gt;Why Are Snowflakes Symmetrical&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Rectangles</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/10/post012.html"/>
			<updated>2021-01-10T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/10/post012</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Piet Mondrian: ‘Art is higher than reality and has no direct relation to reality. To approach the spiritual in art, one will make as little use as possible of reality, because reality is opposed to the spiritual. We find ourselves in the presence of an abstract art. Art should be above reality, otherwise it would have no value for man.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/012a.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/012h.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// basic rectangle division
// repeated division of rectangle into smaller rectangles
// this sketch has code for simple division

// smallest permitted width or height
// change s for variations
let s = 15;
// margin (border)
let margin = 10;
// to store palette
let colors = [];


function setup() {
  createCanvas(600, 600);
  background(255)
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197),
            color(0,0,0)];
}

function draw(){
  noLoop();
  // call recursive div algorithm
  drawRect(margin,margin,width-2*margin,height-2*margin);
}

// recursive division of rectangle
function drawRect(x,y,w,h)
{
  // draw a rectangle of width w and height h at (x,y)
  render(x,y,w,h);

  // then figure out if we need to draw another
  let splitWidth = random(1) &amp;gt; 0.5;
  let splitWhere = random(0.3, 0.8);

  // if we're splitting the width
  if(splitWidth &amp;amp;&amp;amp; w &amp;gt; s)
  {
    drawRect(x, y, w * splitWhere, h);
    drawRect(x + (w * splitWhere), y, w * (1 - splitWhere), h);
  }
  // else if we're splitting the height
  else if(h &amp;gt; s)
  {
    drawRect(x, y, w, h * splitWhere);
    drawRect(x, y + (h * splitWhere), w, h * (1 - splitWhere));
  }
}

// final sketch to draw rectangles
function render(x,y,w,h){
  push();
  // move center to x,y i.e make current rectangle the reference
  translate(x,y);
  // colors etc
  let fl = random(colors);
  fill(fl);
  stroke(0);
  // change depending on size of rectangle, greater thickness for larger rects
  strokeWeight(1);
  rect(0,0, w, h);
  pop();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This is a simple series of sketches.&lt;/p&gt;

&lt;p&gt;We draw rectangles recursively,deciding at every iteration of the recursion whether to divide vertically or horizontally.&lt;/p&gt;

&lt;p&gt;Variations are the result of randomisation of division,changes in size of smallest possible rectangle and choice of colours.&lt;/p&gt;

&lt;p&gt;Th choice of color palette in this  series is influenced in part by Piet Mondrian’s Composition II with Red, Blue and Yellow.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.singulart.com/en/2020/02/20/composition-ii-with-red-blue-and-yellow-1930-piet-mondrian-and-neo-plasticism/&quot;&gt;Piet Mondrian and De Stijl Movement&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Criss Cross </title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/08/post011.html"/>
			<updated>2021-01-08T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/08/post011</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Sol LeWitt: ‘You shouldn’t be a prisoner of your own ideas.’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/011a.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011h.png&quot; /&gt;
&lt;img src=&quot;/images/011i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011l.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011m.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011n.png&quot; /&gt;
&lt;img src=&quot;/images/011o.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/011p.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid of cells
// in each cell noise lines are drawn
// lines are drawn symmetrically in 2 directions
// circle used as reference for endpoints of lines
// for double/triple line effect noise level is varied and
// lines are redrawn
// randomness increased from cell to cell

let cl,simplexNoise;
let s,seed;
let k;

// simple function to draw lines in a polygon
function polygon(x, y, radius, start, end) {
  // variations by changing a+= from PI/2 to PI/20
  beginShape();
  for (let a = start; a &amp;lt; end; a+= PI/8) {

    let sx = cos(a) * radius;
    let sy = sin(a) * radius;

    // drawing the lines
    // changing height increases randomness
    let height = 5;
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise2D(seed+k*x,seed+k*sy);
      let y = sy + height*sn;
      vertex(x,y);
    }
    endShape();
    // comment everything below if you want only one line

    // for double lines
    height = 10;
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise2D(seed+k*x,seed+k*sy);
      let y = sy + height*sn;
      vertex(x,y);
    }
    endShape();

    // 3 lines
    height = 20;
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise2D(seed+k*x,seed+k*sy);
      let y = sy + height*sn;
      vertex(x,y);
    }
    endShape();
  }

  // increase noise for each cell by this amount
  // this increment can be changed for variations
  k += 0.005;
  endShape();

}

function setup(){
  createCanvas(600,600);
  background(230, 230, 230);
  // set up colors
  cl = color(12, 32, 32,250);
  strokeWeight(2);
  stroke(cl);
  noFill();

  simplexNoise = new OpenSimplexNoise(Date.now());
  // change seed for each render
  seed = 1000;
  k = 0;
}

function draw(){
  noLoop();
  makeGrid();
}

function makeGrid(){
  // cell size - change for variations
  s = 100;
  // get number of rows and cols
  let rows = height/s;
  let cols = width/s;
  for(let i = 1; i &amp;lt; cols-1; i++){
    for(let j = 1; j &amp;lt; rows-1; j++){
      let x = i*s;
      let y = j*s;

      // set 1
      // change PI/2 to PI/4, PI/6 etc for variations
      // move origin to centre of cell
      push();
      translate(x+s/2,y+s/2);
      rotate(PI/3);
      polygon(0,0, 0.45*s, 0.5*PI,1.5*PI) ;
      pop();

      // set 2
      // repeat symmetrically
      push();
      translate(x+s/2,y+s/2);
      rotate(-PI/3);
      polygon(0,0, 0.45*s, 0.5*PI,1.5*PI) ;
      pop();
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;This set features criss crossed lines.&lt;/p&gt;

&lt;p&gt;The lines are drawn using 2D open simplex noise.&lt;/p&gt;

&lt;p&gt;The canvas is divided into a grid with cells.makeGrid() handles this.&lt;/p&gt;

&lt;p&gt;For each cell we call the polygon function twice.
Polygon function draws lines symmetrically in 2 directions
A circle is used as a reference for endpoints of the lines.&lt;/p&gt;

&lt;p&gt;For details about how variations are obtained, refer to the comments in the code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Lines In Circles</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/04/post009.html"/>
			<updated>2021-01-04T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/04/post009</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Sol LeWitt: ‘The idea becomes a machine that makes the art.’’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/009a.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009h.png&quot; /&gt;
&lt;img src=&quot;/images/009i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/009j.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid based design
// every cell in grid is filled circles
// these circles in turn are made of horizontal noisy lines
// noise is simplex based
// for variations
// color and noise level chosen randomly
// cell size s is varied
// spacing between lines is also changed

let cl,simplexNoise;
let s,seed;
let k;
let colors = [];


function setup(){
  createCanvas(600,600);
  background(25, 3, 30);
  // palette
  colors =[color( 217, 229, 214),color(0, 167, 225),color(237, 222, 164),
          color(247, 160, 114),color(255, 155, 66)];
  simplexNoise = new OpenSimplexNoise(Date.now());
  seed = 1000;
  // noise factor to be incremented for each cell
  k = 0;
}

function draw(){
  noLoop();
  makeGrid();
}

function makeGrid(){
  // cell size
  s = 60;
  let rows = height/s;
  let cols = width/s;
  for(let i = 1; i &amp;lt; cols-1; i++){
    for(let j = 1; j &amp;lt; rows-1; j++){
      let x = i*s;
      let y = j*s;
      push();
      translate(x,y);
      render();
      // change this to experiment like .001,.01, etc
      k += 0.005;
      pop();
    }
  }
}

function render(){
  noFill();
  cl = random(colors);
  cl.setAlpha(100);
  stroke(cl);
  // call to draw a circle of noisy lines
  polygon(s/2,s/2,0.4*s, 0.5*PI,1.5*PI) ;
}

// simple function to draw polygon of any number of sides
// in this sketch we use it to draw a circle
function polygon(x, y, radius, start, end) {
  push();
  translate(x,y);
  for (let a = start; a &amp;lt; end; a+= PI/150) {

    // gives a point on the circumference of the circle
    // PI/150 decides spacing between lines, change this to inc/dec the spacing
    let sx = cos(a) * radius;
    let sy = sin(a) * radius;

    // change height to experiment
    let height = 2;
    beginShape();
    for(let x = sx; x &amp;lt; -sx; x++){
      let sn = simplexNoise.noise2D(seed+k*x,seed+k*sy);
      let y = sy + height*sn;
      vertex(x,y);
    }
    endShape();
  }
  pop();
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;This series follows the same procedure as the &lt;a href=&quot;https://amsykal.github.io/art%20with%20code/2021/01/03/post008.html&quot;&gt;previous series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One minor modification is that we change not only the seed but also the value of k while moving from one cell to next thereby making the lines noisier as we move from first cell to the last.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Noisy Lines</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/03/post008.html"/>
			<updated>2021-01-03T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/03/post008</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Vera Molnár: ‘I have no regrets. My life is squares, triangles, lines’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/005a.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005h.png&quot; /&gt;
&lt;img src=&quot;/images/005i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005l.png&quot; /&gt;
&lt;img src=&quot;/images/005m.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005n.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/005o.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// grid based design
// every cell in grid is filled with horizontal noisy lines
// noise is simplex based
// for variations
// color chosen randomly from a fixed palette
// cell size s is varied
// gap g between lines in each cell is varied
// for changing level of noise scaling factor sc and k is varied

let s;
let colors = [];
let simplexNoise;
let seed;

function setup(){
  createCanvas(600,600);
  background(0);
  // palette
  colors = [color(255, 255, 252),color(190, 183, 164,color(255, 127, 17)),
            color(255, 63, 0),color(243, 198, 119)]
  // create noise object
  simplexNoise = new OpenSimplexNoise(Date.now());
  // set cell size
  // change to 150, 200 for different sizes
  s = 100;
  // seed for noise which we will vary for very cell
  seed = 0;
}

function draw(){
  noLoop();
  makegrid();
}

function makegrid(){
  // set number of rows and columns
  let rows = height/s;
  let cols = width/s;

  // make a grid of cells
  for(let i = 0; i &amp;lt; rows-1; i++){
    for(let j = 0; j &amp;lt; cols-1; j++){
      let x = j*s+s/2;
      let y = i*s+s/2;
      push();
      translate(x,y);
      // in each cell draw horizontal noisy lines
      // changing the gap between the lines, the noise input etc
      // gives variations
      render();
      pop();
    }
  }
}

function render(){
  // gap between lines in each cell
  // change g to 2,3,4 etc
  let g = 1;
  // margin to be left for each cell on all sides
  let m = 10;
  // change seed for every cell to get different patterns
  seed += 1000;
  // change color to black and white for variations
  let rl = random(colors);

  strokeWeight(1);
  rl.setAlpha(250);
  stroke(rl);
  noFill();

  // drawing the lines
  for(let i = m; i &amp;lt;= s-m; i+=g){

    beginShape();
    for(let x = m; x &amp;lt;= s-m; x+=g){
      // try changing k to .01 to 0.001,0.1 etc
      // change sc to 1,5,10,etc
      let sc = 15;
      let k = 0.05
      let y = i+sc*simplexNoise.noise2D(seed+k*x,seed+k*i);
      y = i + sc*simplexNoise.noise2D(2*seed+k*x,2*seed+k*i);
      vertex(x,y);
    }
    endShape();
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;This series uses Open Simplex Noise to draw lines.&lt;/p&gt;

&lt;p&gt;The idea is to first make a grid of cells.The function makegrid() handles this bit. And for each cell makegrid() calls render().
render() then fills each cell with horizontal lines.
The lines are drawn using 2D Open Simplex Noise as so&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// drawing the lines
for(let i = m; i &amp;lt;= s-m; i+=g){

  beginShape();
  for(let x = m; x &amp;lt;= s-m; x+=g){
    // try changing k to .01 to 0.001,0.1 etc
    // change sc to 1,5,10,etc
    let sc = 15;
    let k = 0.05
    let y = i+sc*simplexNoise.noise2D(seed+k*x,seed+k*i);
    vertex(x,y);
  }
  endShape();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We run 2 loops one to move down the vertical axis(i) and one to move along the horizontal axis(x)&lt;/p&gt;

&lt;p&gt;If we were to change vertex(x,y) to vertex(x,i) we would simply get evenly spaced straight horizontal lines. What we do with the simplex noise is to shift i by just a bit at each point.This particular implementation uses the 2D version which takes 2 inputs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let y = i+sc*simplexNoise.noise2D(seed+k*x,seed+k*i);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;i and x are the original points in this particular cell.
Note that we shift the origin to each top left corner of cell and render() draws wrt this shifted origin.&lt;/p&gt;

&lt;p&gt;k decides smoothness of the line.Smaller the value smoother the line, higher the value, jerkier the line.&lt;/p&gt;

&lt;p&gt;sc is just a scaling factor.&lt;/p&gt;

&lt;p&gt;seed - simplex noise is pseudo random in nature, i.e for a given set of input values , it always returns the same value.
In order to have different lines in different cells we change the seed value.If we do not change seed, every cell will have similar looking lines.&lt;/p&gt;

&lt;p&gt;Perlin noise will work just fine for this series.&lt;/p&gt;

&lt;p&gt;Etienne Jacob offers a gentle and more thorough look at the ways in which we can use noise &lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code has comments on where randomness has been implemented to generate the variations.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joshforisha/open-simplex-noise-js&quot;&gt;Open Simplex Noise Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf&quot;&gt;Simplex Noise Demystified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv9gyZZJPE0&quot;&gt;What is OpenSimplex Noise? - Coding Train&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/html/perlin-noise-math-faq.html&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/&quot;&gt;Etienne Jacob&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>More Than A Few Good Corners</title>
			<link href="http://amsykal.github.io/resources%20for%20reflection/2021/01/02/post007.html"/>
			<updated>2021-01-02T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/resources%20for%20reflection/2021/01/02/post007</id>
			<content type="html">&lt;h4 id=&quot;blogs-and-the-likes&quot;&gt;Blogs And The Likes&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://michaelnielsen.org/&quot;&gt;Michael Nielsen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://paulgraham.com/articles.html&quot;&gt;Paul Graham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.aaronsw.com/weblog/&quot;&gt;Aaron Swartz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://fs.blog/blog/&quot;&gt;Farnam Street&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://matt.might.net/articles/&quot;&gt;Matt Might&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.brainpickings.org/&quot;&gt;Brain Pickings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ribbonfarm.com/&quot;&gt;Ribbon Farm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://waitbutwhy.com/&quot;&gt;Wait But Why&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.virginia.edu/~robins/CS_readings.html&quot;&gt;Dr. Gabriel Robins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/busterbenson/public/blob/master/book-of-beliefs.md&quot;&gt;Buster Benson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@yegg/mental-models-i-find-repeatedly-useful-936f1cc405d&quot;&gt;Mental Models, Gabriel Weinberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.defmacro.org/2016/11/25/essay-reading-list.html&quot;&gt;defmacro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nabeelqu.co/&quot;&gt;Nabeel Qureshi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://worrydream.com/&quot;&gt;Bret Victor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guzey.com/&quot;&gt;Alexey Guzey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nateliason.com/blog&quot;&gt;Nat Aliason&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.alfiekohn.org/&quot;&gt;Alfie Kohn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.collaborativefund.com/blog/&quot;&gt;Morgan Housel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.quantamagazine.org/&quot;&gt;Quanta Magazine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://craigmod.com/essays/&quot;&gt;Craig Mod&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://andymatuschak.org/&quot;&gt;Andy Matuschak&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;lectures--talks--youtube-content&quot;&gt;Lectures / Talks / YouTube Content&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL9F0B2048DA4690AF&quot;&gt;MIT Introduction to Biology Lectures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLYaP1u75QsCDt6gTE29X758sD7-by7U_T&quot;&gt;Integrative Biology by Professor Marian Diamond&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kBdfcR-8hEY&amp;amp;list=PL30C13C91CFFEFEA6&quot;&gt;Justice with Michael Sandel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.feynmanlectures.caltech.edu/&quot;&gt;Feynman Lectures , Book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLgRI7D_FXEnrCM8T1czHfJsvbQd4V1jRc&quot;&gt;Feynman Lectures , Videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLFE3074A4CB751B2B&quot;&gt;Fundamentals of Physics with Ramamurti Shankar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLD07B2225BB40E582&quot;&gt;Fundamentals of Physics II with Ramamurti Shankar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC6QYFutt9cluQ3uSM963_KQ&quot;&gt;Ninja Nerd Lectures Biology and Medicine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLKruweaZqDNcTAPb0nBqGx-Ekl9k9ns-V&quot;&gt;Uncommon Knowledge: Featuring Thomas Sowell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCFaYLR_1aryjfB7hLrKGRaQ&quot;&gt;Michael Sugrue , mindblowing erudition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw&quot;&gt;3Blue1Brown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/numberphile&quot;&gt;Numberphile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCePDFpCr78_qmVtpoB1Axaw&quot;&gt;Great Art Explained&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCo-3ThNQmPmQSQL_L6Lx1_w&quot;&gt;Deep Sky Videos&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;specific-lectures-talks-videos&quot;&gt;Specific Lectures /Talks /Videos&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Unzc731iCUY&quot;&gt;How To Speak by Patrick Winston&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ji5_MqicxSo&quot;&gt;The Last Lecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Auuk1y4DRgk&quot;&gt;Marcus Aurelius’ Meditations: The Stoic Ideal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cPG6nJRJeWQ&quot;&gt;When Love Arrives, Spoken Word&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0snNB1yS3IE&quot;&gt;If I should have a daughter …Spoken Word &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=KBAig-QT46Q&quot;&gt;I want to be, Spoken Word&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;podcasts&quot;&gt;Podcasts&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://seenunseen.in/&quot;&gt;The Seen And The Unseen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.econtalk.org/&quot;&gt;Econ Talk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wnycstudios.org/podcasts/radiolab&quot;&gt;Radiolab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dancarlin.com/hardcore-history-series/&quot;&gt;Hardcore History by Dan Carlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://historyofphilosophy.net/&quot;&gt;History of Philosophy Without Any Gaps&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;coding-and-creative-coding-generative-art&quot;&gt;Coding And Creative Coding/ Generative Art&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://projecteuler.net/about&quot;&gt;Project Euler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/terkelg/awesome-creative-coding&quot;&gt;Awesome Creative Coding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://paulbourke.net/fractals/&quot;&gt;Paul Bourke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sighack.com/&quot;&gt;SigHack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.hvidtfeldts.net/index.php/generative-art-links/&quot;&gt;Generative Art Links&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://p5-demos.glitch.me/&quot;&gt;simple p5 demos&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Art with Code: Henon Map</title>
			<link href="http://amsykal.github.io/art%20with%20code/2021/01/01/post006.html"/>
			<updated>2021-01-01T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2021/01/01/post006</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;James Gleick, Chaos: Making a New Science: “But unpredictability was not the reason physicists and mathematicians began taking pendulums seriously again in the sixties and seventies. Unpredictability was only the attention-grabber. Those studying chaotic dynamics discovered that the disorderly behavior of simple systems acted as a creative process. It generated complexity: richly organized patterns, sometimes stable and sometimes unstable, sometimes finite and sometimes infinite, but always with the fascination of living things. That was why scientists played with toys.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/006a.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006h.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006k.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006l.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/006m.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//http://www.complexification.net/gallery/machines/henonPhase/
//http://paulbourke.net/fractals/henonphase/
//https://mathworld.wolfram.com/HenonMap.html
// henon phase is a strange attractor (chaos theory)

// number of iterations
let c = 1000;
// each angle gives a different image
let angle;
// array to store points in the final image
let henons = [];
// color palette
let colors = [];

// some values of 'angle' and corresponding scaling factor that give good images
//0.9342725906771222, 400
//5.391262433494741, 400
//2.7919038736981934, 200
// 1.6, 250
//3.703635470629848, 250
//1.401833965519098, 250
//0.4791091265567063
//3.5617524930438464, 200
//1.2898632053310408, 260
//3.191261030344313, 200
//5.200390764686796, 400
//3.713825392598408, 260
//4.817617182430413, 400
//-10,200

// function to get points on the image
function makeHenons(){
  henons.length = 0;
  henons = [];
  for (let k = 0; k &amp;lt; c; k++){
    henon = new PointObj();
    henons.push(henon);
  };
}


function setup()
{
  createCanvas(800,800);
  angle = 4.817617182430413;
  // using different palettes for different sketches
  colors = [color(86, 163, 166),color(72, 69, 56),color(02, 212, 157),
            color(212, 234, 200),color(192, 216, 224)];
  //colors = [color(243, 198, 119),color(123, 30, 122),
  //          color(179, 63, 98),color(249, 86, 79)];
   //colors = [color( 217, 229, 214),color(0, 167, 225),color(237, 222, 164),
  //           color(247, 160, 114),color(255, 155, 66)];
  makeHenons();
  // change background according to palette chosen
  background(250);
}

function draw()
{
  // for every point on the henon[] display it and update
  // to new location based on henon phase equation
  push();
  translate(0.5*width,0.5*height)
  for (let k = 0; k &amp;lt; henons.length; k++){
    henons[k].show();
    henons[k].update();
  }

  pop();

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class PointObj{
  constructor(){
    // get a random point in a grid (-1 to 1 along both x and y)
    this.x = random(-1,1);
    this.y = random(-1,1);
    this.k = 0;
    this.X = 0;
    this.Y = 0;
    // scaling factor
    this.f  = 400;
    // give the point a random color
    this.cl = random(colors);
  }

  show(cx,cy){
    // set color,alpha and display point , many points so low alpha
    let cl = this.cl;
    cl.setAlpha(20);
    stroke(cl);
    fill(cl);
    ellipse(this.X,this.Y,1,1);

  }

  // get new location of point based on phase equation
  update(){
    this.k = pow(this.y,1) - pow(this.x,2);
    this.y = (this.x * sin(angle)) + (this.k * cos(angle));
    this.x = (this.x * cos(angle)) - (this.k * sin(angle));
    // scale it
    this.X = this.f*this.x;
    this.Y = this.f*this.y;
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;Henon Map is a Strange Attractor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Attractor&quot;&gt;Wiki on Strange Attractor&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the mathematical field of dynamical systems, an attractor is a set of numerical values toward which a system tends to evolve, for a wide variety of starting conditions of the system. System values that get close enough to the attractor values remain close even if slightly disturbed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://around.com/chaos-2/&quot;&gt;James Gleick’s book on Chaos&lt;/a&gt; offers a lovely and insightful introduction to Strange Attractors while Steven Strogatz’s book on &lt;a href=&quot;http://www.stevenstrogatz.com/books/nonlinear-dynamics-and-chaos-with-applications-to-physics-biology-chemistry-and-engineering&quot;&gt;Non Linear Dynamics and Chaos&lt;/a&gt; is a great book for a deeper dive.&lt;/p&gt;

&lt;p&gt;The equations used in this series of sketches are&lt;/p&gt;

&lt;p&gt;$x_{n+1} = x_ncosα - (y_n-x_n^2)sinα$&lt;br /&gt;
$y_{n+1} = x_nsinα + (y_n-x_n^2)cosα$&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;references&quot;&gt;REFERENCES&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.complexification.net/gallery/machines/henonPhase/&quot;&gt;Jared Tarbell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://paulbourke.net/fractals/henonphase/&quot;&gt;Paul Bourke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mathworld.wolfram.com/HenonMap.html&quot;&gt;MathWorld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://around.com/chaos-2/&quot;&gt;James Gleick’s book on Chaos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.stevenstrogatz.com/books/nonlinear-dynamics-and-chaos-with-applications-to-physics-biology-chemistry-and-engineering&quot;&gt;Non Linear Dynamics and Chaos by Steven Strogatz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ycJEoqmQvwg&amp;amp;list=PLbN57C5Zdl6j_qJA-pARJnKsmROzPnO9V&quot;&gt;Steven Strogatz Lectures on Non Linear Dynamics&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Ratatat</title>
			<link href="http://amsykal.github.io/music/2020/12/20/post005.html"/>
			<updated>2020-12-20T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/music/2020/12/20/post005</id>
			<content type="html">&lt;p&gt;When words are too much, there’s &lt;a href=&quot;https://www.youtube.com/channel/UCTcraSQKl7F8GFiLydv6eDg&quot;&gt;Ratatat&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;https://www.seattletimes.com/entertainment/when-words-are-too-much-theres-ratatat/&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Quiet</title>
			<link href="http://amsykal.github.io/life%20lessons/2020/12/18/post004.html"/>
			<updated>2020-12-18T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/life%20lessons/2020/12/18/post004</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;“Solitude matters, and for some people, it’s the air they breathe”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I also believe that introversion is my greatest strength. I have such a strong inner life that I’m never bored and only occasionally lonely. No matter what mayhem is happening around me, I know I can always turn inward.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The highly sensitive [introverted] tend to be philosophical or spiritual in their orientation, rather than materialistic or hedonistic. They dislike small talk. They often describe themselves as creative or intuitive. They dream vividly, and can often recall their dreams the next day. They love music, nature, art, physical beauty. They feel exceptionally strong emotions–sometimes acute bouts of joy, but also sorrow, melancholy, and fear. Highly sensitive people also process information about their environments–both physical and emotional–unusually deeply. They tend to notice subtleties that others miss–another person’s shift in mood, say, or a lightbulb burning a touch too brightly.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Susan Cain, Quiet: The Power of Introverts in a World That Can’t Stop Talking&lt;/p&gt;
&lt;/blockquote&gt;
</content>
		</entry>
	
		<entry>
			<title>Art with Code: Mystery Curves II</title>
			<link href="http://amsykal.github.io/art%20with%20code/2020/12/17/post003.html"/>
			<updated>2020-12-17T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2020/12/17/post003</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;Everything we care about lies somewhere in the middle, where pattern and randomness interlace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;James Gleick&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/003j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003h.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003e.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/003a.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// mystery curves
// concentric curves of increasing radius in a grid
// takes the following parametric form
// x = cos(p*a) + cos(m*a)/2 + sin(n*a)/3;
// y = sin(p*a) + sin(m*a)/2 + cos(n*a)/3;
// where different values of p,m,n give different curves
// in this series we will randomize p,m,n  - no intentional symmetry
// see that resulting curves are more like scribbles

// colors to plot curve - prettying up things a bit
let colors;

function setup(){
  createCanvas(600,600);
  background(250);
  colors = [color(243, 198, 119),color(123, 30, 122),
            color(179, 63, 98),color(249, 86, 79)];
}

function draw(){
  noLoop();
  // make a grid to plot multiple curves in one canvas
  makeGrid();
}

function makeGrid(){
  // change s to different sizes for different cell sizes
  // this series has used s = 60,100,150,200,300,600
  let s = 600;
  let rows = height/s;
  let cols = width/s;
  strokeWeight(2);
  // iterate over each cell
  for (let x = 0; x &amp;lt; rows +1; x+=1){
    for (let y = 0; y &amp;lt; cols+1; y+=1){
      push();
      // changing origin to center of current cell
      translate(s*x+s/2,s*y+s/2);
      render(s);
      pop();
    }
  }
}
function render(s){
  // set maximum size of curve such that it fits in neatly within the cell
  let c = s/4 ;
  // randomize p,m,n
  p = random(10);
  m = random(20);
  n = random(20);
  // plot the curve
  // plotting cocentric curves of increasing radius for a nice looking sketch
  for(let r = 10; r &amp;lt; c; r+=10){
    // set up colors,alpha etc
    let cl = random(colors);
    cl.setAlpha(150);
    fill(cl);
    stroke(0,150);
    // start plotting
    beginShape();
    for(let a = 0; a &amp;lt; 2*PI; a+= PI/1000){
      // parametric equation of the curve
      let x = cos(p*a) + cos(m*a)/2 + sin(n*a)/3;
      let y = sin(p*a) + sin(m*a)/2 + cos(n*a)/3;
      vertex(r*x,r*y);
    }
    endShape(CLOSE);
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;This is again a series based on the same f defined in &lt;a href=&quot;https://amsykal.github.io/art%20with%20code/2020/12/14/post002.html&quot;&gt;previous post&lt;/a&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large f(t)= e^{it} + \frac{1}{2}e^{imt} + \frac{i}{3}e^{-int}&lt;/script&gt;

&lt;p&gt;However here the choice of m and n has been randomized. So symmetry is no longer achieved. The result is a series of curves which look more like scribbles.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mathlesstraveled.com/2015/06/04/random-cyclic-curves-5/&quot;&gt;Math Less Travelled&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.quantamagazine.org/solution-creating-art-with-mathematics-20151030/&quot;&gt;Quanta Magazine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cut-the-knot.org/arithmetic/algebra/FiveFoldGraph.shtml&quot;&gt;Cut the Knot&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Art with Code: Mystery Curves I</title>
			<link href="http://amsykal.github.io/art%20with%20code/2020/12/14/post002.html"/>
			<updated>2020-12-14T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/art%20with%20code/2020/12/14/post002</id>
			<content type="html">&lt;blockquote&gt;
  &lt;p&gt;The most beautiful experience we can have is the mysterious. It is the fundamental emotion that stands at the cradle of true art and true science.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/001f.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001g.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001h.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001i.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001j.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001a.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001b.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001c.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001d.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/001e.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THIS SERIES OF SKETCHES&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// mystery curves
// concentric curves of increasing radius in a grid
// takes the following parametric form
// x = cos(p*a) + cos(m*a)/2 + sin(n*a)/3;
// y = sin(p*a) + sin(m*a)/2 + cos(n*a)/3;
// where different values of p,m,n give different curves
// only select combination of values give symmetrical values
// in the next series we will randomize p,m,n and
// see that resulting curves are more like scribbles

// colors to plot curve - prettying up things a bit
let colors;

function setup(){
  createCanvas(600,600);
  background(250);
  colors = [color(243, 198, 119),color(123, 30, 122),
            color(179, 63, 98),color(249, 86, 79)];
}

function draw(){
  noLoop();
  // make a grid to plot multiple curves in one canvas
  makeGrid();
}

function makeGrid(){
  // change s to different sizes for different cell sizes
  // this series has used s = 100,150,200,300,600
  let s = 600;
  let rows = height/s;
  let cols = width/s;
  strokeWeight(2);
  // iterate over each cell
  for (let x = 0; x &amp;lt; rows +1; x+=1){
    for (let y = 0; y &amp;lt; cols+1; y+=1){
      push();
      // changing origin to center of current cell
      translate(s*x+s/2,s*y+s/2);
      render(s);
      pop();
    }
  }
}
function render(s){
  // set maximum size of curve such that it fits in neatly within the cell
  let c = s/4 ;
  // some combinaitons of (p,m,n) which gives neat symmetric curves
  amn = [[1,7,11],[1,6,14],[1,5,11],[1,5,15],[1,8,13],[1,8,20],[1,9,15],
          [1,10,17],[10,10,13]];
  // pick one of the above to plot in the current cell
  q = random(amn);
  p = q[0];
  m = q[1];
  n = q[2];
  // plot the curve
  // plotting cocentric curves of increasing radius for a nice looking sketch
  for(let r = 10; r &amp;lt; c; r+=10){
    // set up colors,alpha etc
    let cl = random(colors);
    cl.setAlpha(150);
    fill(cl);
    stroke(0,150);
    // start plotting
    beginShape();
    for(let a = 0; a &amp;lt; 2*PI; a+= PI/1000){
      // parametric equation of the curve
      let x = cos(p*a) + cos(m*a)/2 + sin(n*a)/3;
      let y = sin(p*a) + sin(m*a)/2 + cos(n*a)/3;
      vertex(r*x,r*y);
    }
    endShape(CLOSE);
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;Consider a function f:ℝ→ℂ defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large f(t)= e^{it} + \frac{1}{2}e^{imt} + \frac{i}{3}e^{-int}&lt;/script&gt;

&lt;p&gt;The condition for k fold symmetry for f(t) is given as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large f(t + \frac{2\pi}{k}) = e^{i\frac{2\pi}{k}}f(t)&lt;/script&gt;

&lt;p&gt;Solving for m and n in terms of k&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large f(t + \frac{2\pi}{k})&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large = e^{i(t+\frac{2\pi}{k})} + \frac{1}{2}e^{im(t+\frac{2\pi}{k})} + \frac{i}{3}e^{-in(t+\frac{2\pi}{k})}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large = e^{i\frac{2\pi}{k}}e^{it} + \frac{1}{2}e^{im\frac{2\pi}{k}}e^{imt} + \frac{i}{3}e^{-in\frac{2\pi}{k}}e^{-int}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large = e^{i\frac{2\pi}{k}}(e^{it}+\frac{1}{2}e^{imt}e^{i(m-1)\frac{2\pi}{k}} + \frac{i}{3}e^{-int}e^{-i(n+1)\frac{2\pi}{k}})&lt;/script&gt;

&lt;p&gt;In order that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large f(t + \frac{2\pi}{k}) = e^{i\frac{2\pi}{k}}f(t)&lt;/script&gt;

&lt;p&gt;We must have k dividing both m-1 and n+1&lt;/p&gt;

&lt;p&gt;If k = 5 , 5 must divide m-1 and n+1&lt;/p&gt;

&lt;p&gt;One possible solution, which has been implemented in the code above is m = 6 and n = 14 giving m-1 = 5 and n+1 = 15.&lt;/p&gt;

&lt;p&gt;m = 8 and n = 13 gives us m-1 = 7 and n+1 = 14 leading to a seven fold symmetry.&lt;/p&gt;

&lt;p&gt;So on and so forth.&lt;/p&gt;

&lt;p&gt;As lucidly explained in &lt;a href=&quot;https://mathlesstraveled.com/2015/06/05/mystery-curve-animated/&quot;&gt;Math Less Travelled&lt;/a&gt;, we can think of the function f&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large f(t)= e^{it} + \frac{1}{2}e^{imt} + \frac{i}{3}e^{-int}&lt;/script&gt;

&lt;p&gt;in terms of motions around a circle (epicycles). The first term corresponds to a circle of radius unit 1 rotating at a certain speed (red circle below). The second circle (yellow circle) corresponds to a circle of half the radius, rotating 6 times faster than the first, with it’s centre tracing the first circle.The third term corresponds to a circle (white circle) with (1/3)rd the radius of the first circle, moving at a speed 14 times faster,phased out by a quarter rotation.The centre of the third circle traces a path around the second circle.&lt;/p&gt;

&lt;p&gt;The illustration below shows how this works as you see the point at the edge of the 3rd circle (white) traces the function describing the mystery curve(blue) at the end of one full cycle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/002.gif&quot; width=&quot;400&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;CODE FOR THE ABOVE ANIMATION&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// mystery curves
// expressed as a sum of motions in circles

// colors to plot curve - prettying up things a bit
let colors;
let s,c
// number of frames - helps with looping
let numFrames = 300;
// set frame rate
let fps = 10;
// the canvas capturer instance
let capturer = new CCapture({ format: 'png', framerate: fps });

function setup(){
  createCanvas(600,600);
  background(250);
  colors = [color(208, 0, 0),color(255, 186, 8),
            color(221, 225, 230),color(63, 136, 197)];
  s = 600;
  frameRate(fps);
  // start the recording for animation
  capturer.start();

}

function draw(){
  // once we have looped around a curve stop recording and looping
  if (frameCount &amp;gt;= numFrames){
    noLoop();
    capturer.stop();
    capturer.save();
    return;
  }
  // push origin to center
  push();
  translate(s/2,s/2);
  render(s)
  pop();
  // capture this frame
  capturer.capture(document.getElementById('defaultCanvas0'));
}


function render(s){

  // reset background
  background(0);

  // update angle
  let a = 2*PI*frameCount/numFrames;

  // get coordinates for all circles and lines
  let x = c*cos(a);
  let y = -c*sin(a);
  let x1 = c/2*cos(6*a);
  let y1 = -c/2*sin(6*a);
  let x2 = c/3*sin(14*a);
  let y2=  -c/3*cos(14*a);

  // circle 1
  noFill();
  strokeWeight(2);
  cl = colors[0];
  cl.setAlpha(200);
  stroke(cl);
  circle(0,0,2*c,2*c);
  line(0,0,x,y);

  // circle 2
  cl = colors[1];
  cl.setAlpha(200);
  stroke(cl);
  circle(x,y,c,c);
  line(x,y,x+x1,y+y1);

  // circle 3
  cl = colors[2];
  cl.setAlpha(200);
  stroke(cl);
  circle(x+x1,y+y1,(2/3)*c,(2/3)*c);
  line(x+x1,y+y1,x+x1+x2,y+y1+y2);

  // curve - we plot full curve every frame as a reference to
  // see how the circles trace the curve
  cl = colors[3];
  cl.setAlpha(200);
  stroke(cl);
  beginShape();
  for(let a1 = 0; a1 &amp;lt; 2*PI; a1+= PI/1000){
    // parametric equation of the curve
    let x = cos(a1) + cos(6*a1)/2 + sin(14*a1)/3;
    let y = sin(a1) + sin(6*a1)/2 + cos(14*a1)/3;
    vertex(c*x,-c*y);
  }
  endShape(CLOSE);

  // to show the point follwing motions in circles tracing the curve
  fill(colors[0]);
  ellipse(x+x1+x2,y+y1+y2,12,12);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mathlesstraveled.com/2015/06/04/random-cyclic-curves-5/&quot;&gt;Math Less Travelled&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.quantamagazine.org/solution-creating-art-with-mathematics-20151030/&quot;&gt;Quanta Magazine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cut-the-knot.org/arithmetic/algebra/FiveFoldGraph.shtml&quot;&gt;Cut the Knot&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
		</entry>
	
		<entry>
			<title>Building your Github Pages Site</title>
			<link href="http://amsykal.github.io/github%20pages/2019/12/17/post001.html"/>
			<updated>2019-12-17T00:00:00+05:30</updated>
			<id>http://amsykal.github.io/github%20pages/2019/12/17/post001</id>
			<content type="html">&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages&quot;&gt;Programming Historian&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/01-setup/&quot;&gt;Jekyll Tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/&quot;&gt;Coding Fox’s clever solution to Adding Categories and Tags&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	

</feed>
